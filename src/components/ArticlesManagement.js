import React, { useState, useEffect, useCallback } from 'react';
import { supabase } from '../supabaseClient';
import './ArticlesManagement.css';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
const SEARCH_OPTIONS = {
    NAME: 'name',
    ARTICLE_NUM: 'article_num',
    MATERIAL_TYPE: 'material_type'
};

const SORT_DIRECTION = {
    ASC: 'asc',
    DESC: 'desc'
};

function ArticlesManagement() {
    // –°—Ç–∞–Ω–∏ –¥–ª—è –¥–∞–Ω–∏—Ö
    const [articles, setArticles] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // –°—Ç–∞–Ω–∏ –¥–ª—è –ø–æ—à—É–∫—É —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    const [searchTerm, setSearchTerm] = useState('');
    const [searchBy, setSearchBy] = useState(SEARCH_OPTIONS.NAME);
    const [sortField, setSortField] = useState('article_id');
    const [sortDirection, setSortDirection] = useState(SORT_DIRECTION.ASC);

    // –°—Ç–∞–Ω–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω
    const [modalState, setModalState] = useState({
        create: false,
        edit: false,
        delete: false
    });

    // –°—Ç–∞–Ω–∏ –¥–ª—è —Ñ–æ—Ä–º–∏
    const [currentArticle, setCurrentArticle] = useState(null);
    const [formData, setFormData] = useState(getInitialFormData());

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏
    function getInitialFormData() {
        return {
            name: '',
            article_num: '',
            thickness: '',
            material_type: '',
            file_url: ''
        };
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫—É–ª—ñ–≤
    const fetchArticles = useCallback(async () => {
        setLoading(true);
        setError(null);

        try {
            let query = supabase
                .from('articles')
                .select('*')
                .order(sortField, { ascending: sortDirection === SORT_DIRECTION.ASC });

            // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É
            if (searchTerm) {
                query = query.ilike(searchBy, `%${searchTerm}%`);
            }

            const { data, error } = await query;
            if (error) throw error;

            setArticles(data || []);
        } catch (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫—É–ª—ñ–≤:', err);
            setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª–∏');
        } finally {
            setLoading(false);
        }
    }, [searchTerm, searchBy, sortField, sortDirection]);

    useEffect(() => {
        fetchArticles();
    }, [fetchArticles]);

    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    const handleSort = (field) => {
        if (sortField === field) {
            setSortDirection(current =>
                current === SORT_DIRECTION.ASC ? SORT_DIRECTION.DESC : SORT_DIRECTION.ASC
            );
        } else {
            setSortField(field);
            setSortDirection(SORT_DIRECTION.ASC);
        }
    };

    // –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–∏–º–∏ –≤—ñ–∫–Ω–∞–º–∏
    const openModal = (type, article = null) => {
        setCurrentArticle(article);
        setModalState(prev => ({ ...prev, [type]: true }));

        if (type === 'create') {
            setFormData(getInitialFormData());
        } else if (type === 'edit' && article) {
            setFormData({
                name: article.name,
                article_num: article.article_num,
                thickness: article.thickness,
                material_type: article.material_type,
                    file_url: article.file_url || ''
            });
        }
    };

    const closeModal = (type) => {
        setModalState(prev => ({ ...prev, [type]: false }));
        setError(null);
    };

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–æ–º–µ—Ä—É –∞—Ä—Ç–∏–∫—É–ª–∞
    const checkArticleNumberUnique = async (articleNum, excludeId = null) => {
        let query = supabase
            .from('articles')
            .select('article_num')
            .eq('article_num', articleNum);

        if (excludeId) {
            query = query.neq('article_id', excludeId);
        }

        const { data } = await query.single();
        return !data;
    };

    // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
    const handleSubmit = async (e, type) => {
        e.preventDefault();
        setLoading(true);
        setError(null);

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            if (formData.article_num) {
                const isUnique = await checkArticleNumberUnique(
                    formData.article_num,
                    type === 'edit' ? currentArticle.article_id : null
                );

                if (!isUnique) {
                    throw new Error(`–ê—Ä—Ç–∏–∫—É–ª –∑ –Ω–æ–º–µ—Ä–æ–º ${formData.article_num} –≤–∂–µ —ñ—Å–Ω—É—î!`);
                }
            }

            if (type === 'create') {
                const { error } = await supabase
                    .from('articles')
                    .insert([formData])
                    .select();
                if (error) throw error;

                alert('–ê—Ä—Ç–∏–∫—É–ª —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!');
            } else if (type === 'edit') {
                const { error } = await supabase
                    .from('articles')
                    .update(formData)
                    .eq('article_id', currentArticle.article_id);
                if (error) throw error;

                alert('–ê—Ä—Ç–∏–∫—É–ª —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π!');
            }

            closeModal(type);
            fetchArticles();
        } catch (err) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ ${type === 'create' ? '—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è' : '–æ–Ω–æ–≤–ª–µ–Ω–Ω—è'} –∞—Ä—Ç–∏–∫—É–ª–∞:`, err);
            setError(err.message);
        } finally {
            setLoading(false);
        }
    };

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫—É–ª–∞
    const handleDelete = async () => {
        setLoading(true);
        setError(null);

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞—Ä—Ç–∏–∫—É–ª–∞
            const { data: usageData } = await supabase
                .from('job_details')
                .select('job_detail_id')
                .eq('article_id', currentArticle.article_id)
                .limit(1);

            if (usageData?.length > 0) {
                throw new Error('–¶–µ–π –∞—Ä—Ç–∏–∫—É–ª –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –∑–∞–≤–¥–∞–Ω–Ω—è—Ö —ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–∏–π!');
            }

            const { error } = await supabase
                .from('articles')
                .delete()
                .eq('article_id', currentArticle.article_id);
            if (error) throw error;

            closeModal('delete');
            fetchArticles();
            alert('–ê—Ä—Ç–∏–∫—É–ª —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π!');
        } catch (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫—É–ª–∞:', err);
            setError(err.message);
        } finally {
            setLoading(false);
        }
    };

    // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    const handleFormChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: name === 'thickness' ? parseFloat(value) || '' : value
        }));
    };

    const handleClearSearch = () => {
        setSearchTerm('');
        setSearchBy(SEARCH_OPTIONS.NAME);
    };

    const renderSortIcon = (field) => {
        if (sortField !== field) return '‚ÜïÔ∏è';
        return sortDirection === SORT_DIRECTION.ASC ? '‚Üë' : '‚Üì';
    };

    const getSearchPlaceholder = () => {
        const placeholders = {
            [SEARCH_OPTIONS.NAME]: "–ù–∞–∑–≤–∞ –∞—Ä—Ç–∏–∫—É–ª–∞...",
            [SEARCH_OPTIONS.ARTICLE_NUM]: "–ù–æ–º–µ—Ä –∞—Ä—Ç–∏–∫—É–ª–∞...",
            [SEARCH_OPTIONS.MATERIAL_TYPE]: "–¢–∏–ø –º–∞—Ç–µ—Ä—ñ–∞–ª—É..."
        };
        return placeholders[searchBy];
    };

    // –†–µ–Ω–¥–µ—Ä —Ñ—É–Ω–∫—Ü—ñ—ó
    const renderTableHeader = () => (
        <thead>
        <tr>
            <th onClick={() => handleSort('article_id')}>
                ID {renderSortIcon('article_id')}
            </th>
            <th onClick={() => handleSort('article_num')}>
                –ù–æ–º–µ—Ä {renderSortIcon('article_num')}
            </th>
            <th onClick={() => handleSort('name')}>
                –ù–∞–∑–≤–∞ {renderSortIcon('name')}
            </th>
            <th onClick={() => handleSort('thickness')}>
                –¢–æ–≤—â–∏–Ω–∞ {renderSortIcon('thickness')}
            </th>
            <th onClick={() => handleSort('material_type')}>
                –ú–∞—Ç–µ—Ä—ñ–∞–ª {renderSortIcon('material_type')}
            </th>
            <th onClick={() => handleSort('file_url')}>
                –§–∞–π–ª {renderSortIcon('file_url')}
            </th>
            <th>–î—ñ—ó</th>
        </tr>
        </thead>
    );

    const renderTableRow = (article) => (
        <tr key={article.article_id}>
            <td className="article-num">{article.article_id}</td>
            <td className="article-num">{article.article_num}</td>
            <td className="article-name">{article.name}</td>
            <td className="article-thickness">{article.thickness} –º–º</td>
            <td className="article-material">{article.material_type}</td>
            <td className="article-file">
                {article.file_url ? (
                    <a
                        href={article.file_url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="file-link"
                    >
                        üìé –§–∞–π–ª
                    </a>
                ) : (
                    <span className="no-file">‚Äî</span>
                )}
            </td>
            <td className="actions">
                <button
                    className="edit-button"
                    onClick={() => openModal('edit', article)}
                    title="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏"
                >
                    ‚úèÔ∏è
                </button>
                <button
                    className="delete-button"
                    onClick={() => openModal('delete', article)}
                    title="–í–∏–¥–∞–ª–∏—Ç–∏"
                >
                    üóëÔ∏è
                </button>
            </td>
        </tr>
    );

    const renderFormField = (label, name, type = 'text', required = true, props = {}) => (
        <div className="form-group">
            <label>{label} {required && '*'}</label>
            <input
                type={type}
                name={name}
                value={formData[name]}
                onChange={handleFormChange}
                required={required}
                {...props}
            />
        </div>
    );

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
    if (loading && articles.length === 0) {
        return <div className="loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫—É–ª—ñ–≤...</div>;
    }

    return (
        <div className="articles-management">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è */}
            <div className="articles-header">
                <h1>üì¶ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ê—Ä—Ç–∏–∫—É–ª–∞–º–∏</h1>
                <button
                    className="create-button"
                    onClick={() => openModal('create')}
                    disabled={loading}
                >
                    + –î–æ–¥–∞—Ç–∏ –ê—Ä—Ç–∏–∫—É–ª
                </button>
            </div>

            {error && <div className="error-message">{error}</div>}

            {/* –ü–∞–Ω–µ–ª—å –ø–æ—à—É–∫—É */}
            <div className="articles-search">
                <div className="search-filters">
                    <div className="filter-field">
                        <label htmlFor="search-by">–ü–æ—à—É–∫ –∑–∞:</label>
                        <select
                            id="search-by"
                            value={searchBy}
                            onChange={(e) => setSearchBy(e.target.value)}
                        >
                            <option value={SEARCH_OPTIONS.NAME}>–ù–∞–∑–≤–æ—é –∞—Ä—Ç–∏–∫—É–ª–∞</option>
                            <option value={SEARCH_OPTIONS.ARTICLE_NUM}>–ù–æ–º–µ—Ä–æ–º –∞—Ä—Ç–∏–∫—É–ª–∞</option>
                            <option value={SEARCH_OPTIONS.MATERIAL_TYPE}>–¢–∏–ø–æ–º –º–∞—Ç–µ—Ä—ñ–∞–ª—É</option>
                        </select>
                    </div>

                    <div className="filter-field">
                        <label htmlFor="search-term">–ó–Ω–∞—á–µ–Ω–Ω—è:</label>
                        <input
                            id="search-term"
                            type="text"
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            placeholder={getSearchPlaceholder()}
                        />
                    </div>

                    <button
                        type="button"
                        className="filter-clear"
                        onClick={handleClearSearch}
                        disabled={!searchTerm && searchBy === SEARCH_OPTIONS.NAME}
                    >
                        –û—á–∏—Å—Ç–∏—Ç–∏
                    </button>
                </div>

                <div className="search-results-count">
                    –ó–Ω–∞–π–¥–µ–Ω–æ: {articles.length} –∞—Ä—Ç–∏–∫—É–ª—ñ–≤
                </div>
            </div>

            {/* –¢–∞–±–ª–∏—Ü—è –∞—Ä—Ç–∏–∫—É–ª—ñ–≤ */}
            <div className="articles-table-container">
                <table className="articles-table">
                    {renderTableHeader()}
                    <tbody>
                    {articles.map(renderTableRow)}
                    </tbody>
                </table>

                {articles.length === 0 && !loading && (
                    <div className="no-results">
                        {searchTerm ? '–ê—Ä—Ç–∏–∫—É–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ' : '–ù–µ–º–∞—î –∞—Ä—Ç–∏–∫—É–ª—ñ–≤'}
                    </div>
                )}
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è */}
            {modalState.create && (
                <Modal
                    title="–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞"
                    onClose={() => closeModal('create')}
                    onSubmit={(e) => handleSubmit(e, 'create')}
                    loading={loading}
                    submitText={loading ? '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è...' : '–°—Ç–≤–æ—Ä–∏—Ç–∏'}
                >
                    {renderFormField('–ù–æ–º–µ—Ä –∞—Ä—Ç–∏–∫—É–ª–∞', 'article_num', 'text', true, {
                        placeholder: '3000312.00.001'
                    })}
                    {renderFormField('–ù–∞–∑–≤–∞ –∞—Ä—Ç–∏–∫—É–ª–∞', 'name', 'text', true, {
                        placeholder: '–ü–ª–∞—Å—Ç–∏–Ω–∞ –æ–ø–æ—Ä–Ω–∞'
                    })}
                    {renderFormField('–¢–æ–≤—â–∏–Ω–∞ (–º–º)', 'thickness', 'number', true, {
                        step: "0.1",
                        min: "0.1"
                    })}
                    {renderFormField('–¢–∏–ø –º–∞—Ç–µ—Ä—ñ–∞–ª—É', 'material_type', 'text', true, {
                        placeholder: '–°—Ç–∞–ª—å 3'
                    })}
                    {renderFormField('URL —Ñ–∞–π–ª—É', 'file_url', 'text', false, {
                        placeholder: 'design/file_name.dxf'
                    })}
                </Modal>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è */}
            {modalState.edit && (
                <Modal
                    title="–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞—Ä—Ç–∏–∫—É–ª–∞"
                    onClose={() => closeModal('edit')}
                    onSubmit={(e) => handleSubmit(e, 'edit')}
                    loading={loading}
                    submitText={loading ? '–û–Ω–æ–≤–ª–µ–Ω–Ω—è...' : '–û–Ω–æ–≤–∏—Ç–∏'}
                >
                    {renderFormField('–ù–æ–º–µ—Ä –∞—Ä—Ç–∏–∫—É–ª–∞', 'article_num')}
                    {renderFormField('–ù–∞–∑–≤–∞ –∞—Ä—Ç–∏–∫—É–ª–∞', 'name')}
                    {renderFormField('–¢–æ–≤—â–∏–Ω–∞ (–º–º)', 'thickness', 'number', true, {
                        step: "0.1",
                        min: "0.1"
                    })}
                    {renderFormField('–¢–∏–ø –º–∞—Ç–µ—Ä—ñ–∞–ª—É', 'material_type')}
                    {renderFormField('URL —Ñ–∞–π–ª—É', 'file_url', 'text', false)}
                </Modal>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è */}
            {modalState.delete && currentArticle && (
                <Modal
                    title="–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫—É–ª–∞"
                    onClose={() => closeModal('delete')}
                    onSubmit={handleDelete}
                    loading={loading}
                    submitText={loading ? '–í–∏–¥–∞–ª–µ–Ω–Ω—è...' : '–¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏'}
                    type="delete"
                >
                    <p>–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª?</p>
                    <div className="article-preview">
                        <strong>{currentArticle.article_num}</strong> - {currentArticle.name}
                    </div>
                </Modal>
            )}
        </div>
    );
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Modal –¥–ª—è –∫—Ä–∞—â–æ—ó —ñ–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—ó
function Modal({
                   title,
                   children,
                   onClose,
                   onSubmit,
                   loading,
                   submitText,
                   type = 'form'
               }) {
    return (
        <div className="modal-overlay">
            <div className={`modal-content ${type === 'delete' ? 'delete-modal' : ''}`}>
                <h2>{title}</h2>
                {type === 'form' ? (
                    <form onSubmit={onSubmit}>
                        {children}
                        <div className="modal-actions">
                            <button type="submit" className="submit-button" disabled={loading}>
                                {submitText}
                            </button>
                            <button type="button" className="cancel-button" onClick={onClose}>
                                –°–∫–∞—Å—É–≤–∞—Ç–∏
                            </button>
                        </div>
                    </form>
                ) : (
                    <>
                        {children}
                        <div className="modal-actions">
                            <button className="delete-confirm-button" onClick={onSubmit} disabled={loading}>
                                {submitText}
                            </button>
                            <button className="cancel-button" onClick={onClose}>
                                –°–∫–∞—Å—É–≤–∞—Ç–∏
                            </button>
                        </div>
                    </>
                )}
            </div>
        </div>
    );
}

export default ArticlesManagement;