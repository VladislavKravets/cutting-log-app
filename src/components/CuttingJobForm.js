// src/components/CuttingJobForm.js

import React, { useState, useEffect } from 'react';
import { useNotificationsDB } from '../hooks/useNotificationsDB';
import { supabase } from '../supabaseClient';
import './CuttingJobForm.css';

function CuttingJobForm() {
    const { createNotification } = useNotificationsDB();

    // –°—Ç–∞–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const [jobData, setJobData] = useState({
        due_date: '',
        notes: '',
    });
    const [jobDetails, setJobDetails] = useState([]);
    const [newDetail, setNewDetail] = useState({ article_id: '', quantity_planned: 1 });
    const [loading, setLoading] = useState(false);
    const [createdJobId, setCreatedJobId] = useState(null);

    // –°—Ç–∞–Ω–∏ –¥–ª—è –ø–æ—à—É–∫—É –∞—Ä—Ç–∏–∫—É–ª—ñ–≤
    const [selectedArticleObject, setSelectedArticleObject] = useState(null);
    const [searchResults, setSearchResults] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [searchBy, setSearchBy] = useState('name');

    // –°—Ç–∞–Ω–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [newArticleData, setNewArticleData] = useState({
        name: '',
        article_num: '',
        thickness: 1.0,
        material_type: '',
        file_url: '',
    });

    // –£—Ç–∏–ª—ñ—Ç–∞ debounce
    const debounce = (func, delay) => {
        let timeoutId;
        return (...args) => {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => func.apply(this, args), delay);
        };
    };

    // –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
    const copyJobLinkToClipboard = async () => {
        const jobLink = `${window.location.origin}${window.location.pathname}#/view/jobs?id=${createdJobId}`;

        try {
            await navigator.clipboard.writeText(jobLink);
            alert(`–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É!\n${jobLink}`);
        } catch (err) {
            const textArea = document.createElement('textarea');
            textArea.value = jobLink;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            alert(`–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É!\n${jobLink}`);
        }
    };

    // –õ–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É –∞—Ä—Ç–∏–∫—É–ª—ñ–≤
    const searchArticles = async (term) => {
        if (!term || term.length < 2) {
            setSearchResults([]);
            return;
        }

        let query = supabase
            .from('articles')
            .select('article_id, name, article_num, thickness, material_type');

        if (searchBy === 'name') {
            query = query.ilike('name', `%${term}%`);
        } else {
            query = query.ilike('article_num', `%${term}%`);
        }

        const { data, error } = await query.limit(20);

        if (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∞—Ä—Ç–∏–∫—É–ª—ñ–≤:', error);
        } else {
            setSearchResults(data);
        }
    };

    const debouncedSearch = debounce(searchArticles, 300);

    useEffect(() => {
        if (!selectedArticleObject) {
            debouncedSearch(searchTerm);
        }
    }, [searchTerm, selectedArticleObject, searchBy]);

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ñ–æ—Ä–º–∏
    const handleJobDataChange = (e) => {
        setJobData({ ...jobData, [e.target.name]: e.target.value });
    };

    const handleNewDetailChange = (e) => {
        const value = e.target.name === 'quantity_planned' ? parseInt(e.target.value) : e.target.value;
        setNewDetail({ ...newDetail, [e.target.name]: value });
    };

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–æ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    const handleAddDetail = () => {
        if (!selectedArticleObject || newDetail.quantity_planned < 1) {
            alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∞—Ä—Ç–∏–∫—É–ª —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å.');
            return;
        }

        const articleId = selectedArticleObject.article_id;

        if (jobDetails.some(d => d.article_id === articleId)) {
            alert('–¶–µ–π –∞—Ä—Ç–∏–∫—É–ª –≤–∂–µ —î —É —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó. –ó–º—ñ–Ω—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–±–æ –≤–∏–¥–∞–ª—ñ—Ç—å —Ä—è–¥–æ–∫.');
            return;
        }

        setJobDetails([
            ...jobDetails,
            {
                article_id: articleId,
                quantity_planned: newDetail.quantity_planned,
                article_info: selectedArticleObject,
            }
        ]);

        setNewDetail({ article_id: '', quantity_planned: 1 });
        setSearchTerm('');
        setSelectedArticleObject(null);
        setSearchResults([]);
    };

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫—É–ª–∞ –∑—ñ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    const handleRemoveDetail = (articleId) => {
        setJobDetails(jobDetails.filter(detail => detail.article_id !== articleId));
    };

    // –õ–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
    const handleNewArticleDataChange = (e) => {
        const { name, value } = e.target;
        const val = name === 'thickness' ? parseFloat(value) : value;
        setNewArticleData({ ...newArticleData, [name]: val });
    };

    const handleCreateNewArticle = async (e) => {
        e.preventDefault();
        setLoading(true);

        try {
            if (newArticleData.article_num) {
                const { data: existingArticle } = await supabase
                    .from('articles')
                    .select('article_num')
                    .eq('article_num', newArticleData.article_num)
                    .single();

                if (existingArticle) {
                    throw new Error(`–ê—Ä—Ç–∏–∫—É–ª –∑ –Ω–æ–º–µ—Ä–æ–º ${newArticleData.article_num} –≤–∂–µ —ñ—Å–Ω—É—î!`);
                }
            }

            const { data: articleData, error } = await supabase
                .from('articles')
                .insert([newArticleData])
                .select('article_id, name, article_num, thickness, material_type');

            if (error) throw error;

            const newArt = articleData[0];
            alert(`–ê—Ä—Ç–∏–∫—É–ª "${newArt.name}" (${newArt.article_num}) —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –≤–∏–±—Ä–∞–Ω–æ!`);

            setSelectedArticleObject(newArt);
            setNewDetail({ ...newDetail, article_id: newArt.article_id.toString(), quantity_planned: 1 });
            setSearchTerm(newArt.name);

            setIsModalOpen(false);
            setNewArticleData({ name: '', article_num: '', thickness: 1.0, material_type: '', file_url: '' });

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫—É–ª–∞:', error);
            alert(`–ü–æ–º–∏–ª–∫–∞: ${error.message}`);
        } finally {
            setLoading(false);
        }
    };

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ–æ—Ä–º–∏
    const handleSubmit = async (e) => {
        e.preventDefault();
        if (jobDetails.length === 0) {
            alert('–ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª!');
            return;
        }

        setLoading(true);
        let newJobId = null;

        try {
            const { data: jobDataResult, error: jobError } = await supabase
                .from('cutting_jobs')
                .insert({
                    due_date: jobData.due_date || null,
                    notes: jobData.notes,
                    status: '–í —á–µ—Ä–∑—ñ'
                })
                .select('job_id');

            if (jobError) throw jobError;

            newJobId = jobDataResult[0].job_id;

            const detailsToInsert = jobDetails.map(detail => ({
                job_id: newJobId,
                article_id: detail.article_id,
                quantity_planned: detail.quantity_planned,
            }));

            const { error: detailsError } = await supabase
                .from('job_details')
                .insert(detailsToInsert);

            if (detailsError) throw detailsError;

            try {
                await createNotification({
                    type: 'new_job',
                    title: '–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è',
                    message: `–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è #${newJobId}`,
                    job_id: newJobId
                });
            } catch (notificationError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', notificationError);
            }

            setCreatedJobId(newJobId);

            const jobLink = `${window.location.origin}${window.location.pathname}#/view/jobs?id=${newJobId}`;
            alert(`–ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ${newJobId} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! üéâ\n\n–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.`);

            setJobData({ due_date: '', notes: '' });
            setJobDetails([]);
            setNewDetail({ article_id: '', quantity_planned: 1 });
            setSearchTerm('');
            setSelectedArticleObject(null);

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:', error);
            alert(`–ü–æ–º–∏–ª–∫–∞: ${error.message}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å.`);
            if (newJobId) {
                await supabase.from('cutting_jobs').delete().eq('job_id', newJobId);
            }
        } finally {
            setLoading(false);
        }
    };

    // –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫—É–ª–∞
    if (isModalOpen) {
        return (
            <div className="cutting-form-modal">
                <div className="cutting-form-modal__content">
                    <h3 className="cutting-form-modal__title">–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞</h3>
                    <form onSubmit={handleCreateNewArticle} className="cutting-form-modal__form">
                        <div className="cutting-form-modal__field">
                            <label className="cutting-form-modal__label">–ù–æ–º–µ—Ä –∞—Ä—Ç–∏–∫—É–ª–∞:</label>
                            <input
                                type="text"
                                name="article_num"
                                value={newArticleData.article_num}
                                onChange={handleNewArticleDataChange}
                                placeholder="3000312.00.001"
                                required
                                disabled={loading}
                                className="cutting-form-modal__input"
                            />
                        </div>

                        <div className="cutting-form-modal__field">
                            <label className="cutting-form-modal__label">–ù–∞–∑–≤–∞ –∞—Ä—Ç–∏–∫—É–ª–∞:</label>
                            <input
                                type="text"
                                name="name"
                                value={newArticleData.name}
                                onChange={handleNewArticleDataChange}
                                placeholder="–ü–ª–∞—Å—Ç–∏–Ω–∞ –æ–ø–æ—Ä–Ω–∞"
                                required
                                disabled={loading}
                                className="cutting-form-modal__input"
                            />
                        </div>

                        <div className="cutting-form-modal__field">
                            <label className="cutting-form-modal__label">–¢–æ–≤—â–∏–Ω–∞ (–º–º):</label>
                            <input
                                type="number"
                                name="thickness"
                                step="0.1"
                                min="0.1"
                                value={newArticleData.thickness}
                                onChange={handleNewArticleDataChange}
                                required
                                disabled={loading}
                                className="cutting-form-modal__input"
                            />
                        </div>

                        <div className="cutting-form-modal__field">
                            <label className="cutting-form-modal__label">–¢–∏–ø –º–∞—Ç–µ—Ä—ñ–∞–ª—É:</label>
                            <input
                                type="text"
                                name="material_type"
                                value={newArticleData.material_type}
                                onChange={handleNewArticleDataChange}
                                placeholder="–°—Ç–∞–ª—å 3"
                                required
                                disabled={loading}
                                className="cutting-form-modal__input"
                            />
                        </div>

                        <div className="cutting-form-modal__field">
                            <label className="cutting-form-modal__label">URL —Ñ–∞–π–ª—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):</label>
                            <input
                                type="text"
                                name="file_url"
                                value={newArticleData.file_url}
                                onChange={handleNewArticleDataChange}
                                placeholder="design/file_name.dxf"
                                disabled={loading}
                                className="cutting-form-modal__input"
                            />
                        </div>

                        <div className="cutting-form-modal__actions">
                            <button type="submit" disabled={loading} className="cutting-form-btn cutting-form-btn--primary">
                                {loading ? '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...' : '–ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞ –≤–∏–±—Ä–∞—Ç–∏'}
                            </button>
                            <button type="button" onClick={() => setIsModalOpen(false)} className="cutting-form-btn cutting-form-btn--secondary">
                                –°–∫–∞—Å—É–≤–∞—Ç–∏
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        );
    }

    // –û—Å–Ω–æ–≤–Ω–∏–π —Ä–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return (
        <div className="cutting-form">
            <div className="articles-header">
                <h1>üìã –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –†—ñ–∑–∞–Ω–Ω—è</h1>
            </div>

            {/* –ë–ª–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è */}
            {createdJobId && (
                <div className="cutting-form-success">
                    <div className="cutting-form-success__icon">‚úÖ</div>
                    <div className="cutting-form-success__content">
                        <h3 className="cutting-form-success__title">–ó–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!</h3>
                        <p className="cutting-form-success__text">–ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ{createdJobId} –≥–æ—Ç–æ–≤–µ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.</p>
                        <button
                            onClick={copyJobLinkToClipboard}
                            className="cutting-form-btn cutting-form-btn--success"
                        >
                            üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
                        </button>
                        <p className="cutting-form-success__note">
                            –ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è.
                        </p>
                    </div>
                </div>
            )}

            <form onSubmit={handleSubmit} className="cutting-form__form">
                {/* –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ */}
                <section className="cutting-form-section">
                    <div className="cutting-form-section__header">
                        <h2 className="cutting-form-section__title">–û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ</h2>
                    </div>

                    <div className="cutting-form-section__content">
                        <div className="cutting-form-field">
                            <label className="cutting-form-field__label">
                                –î–∞—Ç–∞ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è (–ø–ª–∞–Ω)
                            </label>
                            <input
                                type="date"
                                name="due_date"
                                value={jobData.due_date}
                                onChange={handleJobDataChange}
                                required
                                className="cutting-form-field__input"
                            />
                        </div>

                        <div className="cutting-form-field">
                            <label className="cutting-form-field__label">
                                –ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –ó–∞–≤–¥–∞–Ω–Ω—è
                            </label>
                            <textarea
                                name="notes"
                                value={jobData.notes}
                                onChange={handleJobDataChange}
                                rows="3"
                                placeholder="–í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∏–º—ñ—Ç–∫–∏..."
                                className="cutting-form-field__textarea"
                            />
                        </div>
                    </div>
                </section>

                <div className="cutting-form-divider"></div>

                {/* –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞—Ä—Ç–∏–∫—É–ª—ñ–≤ */}
                <section className="cutting-form-section">
                    <div className="cutting-form-section__header">
                        <h2 className="cutting-form-section__title">
                            –î–æ–¥–∞—Ç–∏ –ê—Ä—Ç–∏–∫—É–ª –¥–æ –°–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
                        </h2>
                    </div>

                    <div className="cutting-form-section__content">
                        <div className="cutting-form-search">
                            <div className="cutting-form-search__controls">
                                <div className="cutting-form-field cutting-form-field--inline">
                                    <label className="cutting-form-field__label">–ü–æ—à—É–∫ –∑–∞:</label>
                                    <select
                                        value={searchBy}
                                        onChange={(e) => setSearchBy(e.target.value)}
                                        className="cutting-form-field__select"
                                        style={{"width": "100%"}}
                                    >
                                        <option value="name">–ù–∞–∑–≤–æ—é</option>
                                        <option value="article_num">–ù–æ–º–µ—Ä–æ–º</option>
                                    </select>
                                </div>

                                <div className="cutting-form-field cutting-form-field--inline">
                                    <label className="cutting-form-field__label">
                                        {searchBy === 'name' ? '–ü–æ—à—É–∫ –ê—Ä—Ç–∏–∫—É–ª–∞:' : '–ü–æ—à—É–∫ –∑–∞ –ù–æ–º–µ—Ä–æ–º:'}
                                    </label>
                                    <input
                                        type="text"
                                        value={searchTerm}
                                        onChange={(e) => setSearchTerm(e.target.value)}
                                        placeholder={
                                            searchBy === 'name'
                                                ? "–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏..."
                                                : "3000312.00.001"
                                        }
                                        disabled={!!selectedArticleObject}
                                        className="cutting-form-field__input"
                                    />
                                </div>

                                {/* –ö–Ω–æ–ø–∫–∞ –∑–º—ñ–Ω–∏ –≤–∏–±–æ—Ä—É */}
                                {selectedArticleObject && (
                                    <button
                                        style={{margin: "5px"}}
                                        type="button"
                                        onClick={() => {
                                            setSelectedArticleObject(null);
                                            setSearchTerm('');
                                            setNewDetail({ article_id: '', quantity_planned: 1 });
                                            setSearchResults([]);
                                        }}
                                        className="cutting-form-btn cutting-form-btn--danger cutting-form-btn--small"
                                    >
                                        &times;
                                    </button>
                                )}

                                <div className="cutting-form-field cutting-form-field--inline">
                                    <label className="cutting-form-field__label">–ö—ñ–ª—å–∫—ñ—Å—Ç—å (—à—Ç):</label>
                                    <input
                                        type="number"
                                        name="quantity_planned"
                                        value={newDetail.quantity_planned}
                                        onChange={handleNewDetailChange}
                                        min="1"
                                        required
                                        disabled={!selectedArticleObject}
                                        className="cutting-form-field__input cutting-form-field__input--small"
                                    />
                                </div>

                                <div className="cutting-form-add">

                                    <button
                                        type="button"
                                        onClick={handleAddDetail}
                                        className="cutting-form-btn cutting-form-btn--add"
                                        disabled={!selectedArticleObject || newDetail.quantity_planned < 1}
                                    >
                                        –î–æ–¥–∞—Ç–∏ –≤ –ó–∞–≤–¥–∞–Ω–Ω—è
                                    </button>
                                </div>
                            </div>

                            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É */}
                            {!selectedArticleObject && searchTerm.length >= 2 && searchResults.length > 0 && (
                                <div className="cutting-form-search__results">
                                    {searchResults.map((art) => (
                                        <div
                                            key={art.article_id}
                                            className="cutting-form-search__item"
                                            onClick={() => {
                                                setSelectedArticleObject(art);
                                                setNewDetail({ ...newDetail, article_id: art.article_id.toString() });
                                                setSearchTerm(searchBy === 'name' ? art.name : art.article_num);
                                                setSearchResults([]);
                                            }}
                                        >
                                            <div className="cutting-form-search__item-number">{art.article_num}</div>
                                            <div className="cutting-form-search__item-name">{art.name}</div>
                                            <div className="cutting-form-search__item-details">
                                                {art.thickness}–º–º, {art.material_type}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            )}

                            {/* –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ */}
                            {!selectedArticleObject && searchTerm.length >= 2 && searchResults.length === 0 && (
                                <div className="cutting-form-search__empty">
                                    <p className="cutting-form-search__empty-text">–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>
                                    <button
                                        type="button"
                                        className="cutting-form-btn cutting-form-btn--create"
                                        onClick={() => {
                                            const initialData = {
                                                name: searchBy === 'name' ? searchTerm : '',
                                                article_num: searchBy === 'article_num' ? searchTerm : '',
                                                thickness: 1.0,
                                                material_type: '',
                                                file_url: '',
                                            };
                                            setNewArticleData(initialData);
                                            setIsModalOpen(true);
                                        }}
                                    >
                                        + –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª
                                    </button>
                                </div>
                            )}
                        </div>

                        {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∏–±—Ä–∞–Ω–∏–π –∞—Ä—Ç–∏–∫—É–ª */}
                        {selectedArticleObject && (
                            <div className="cutting-form-selected">
                                <div className="cutting-form-selected__icon">‚úì</div>
                                <div className="cutting-form-selected__info">
                                    <strong>{selectedArticleObject.article_num}</strong> - {selectedArticleObject.name}
                                    <span className="cutting-form-selected__details">
                                        –¢–æ–≤—â–∏–Ω–∞: {selectedArticleObject.thickness}–º–º | –ú–∞—Ç–µ—Ä—ñ–∞–ª: {selectedArticleObject.material_type}
                                    </span>
                                </div>
                            </div>
                        )}
                    </div>
                </section>

                <div className="cutting-form-divider"></div>

                {/* –°–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω–Ω—è */}
                <section className="cutting-form-section">
                    <div className="cutting-form-section__header">
                        <h2 className="cutting-form-section__title">–°–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ó–∞–≤–¥–∞–Ω–Ω—è</h2>
                        <span className="cutting-form-section__counter">{jobDetails.length} –ø–æ–∑–∏—Ü—ñ–π</span>
                    </div>

                    <div className="cutting-form-section__content">
                        {jobDetails.length === 0 ? (
                            <div className="cutting-form-empty">
                                <div className="cutting-form-empty__icon">üìù</div>
                                <p className="cutting-form-empty__text">–°–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø–æ—Ä–æ–∂–Ω—è. –î–æ–¥–∞–π—Ç–µ –∞—Ä—Ç–∏–∫—É–ª–∏.</p>
                            </div>
                        ) : (
                            <div className="cutting-form-table">
                                <table className="cutting-form-table__table">
                                    <thead className="cutting-form-table__head">
                                    <tr>
                                        <th className="cutting-form-table__header">–ù–æ–º–µ—Ä</th>
                                        <th className="cutting-form-table__header">–ê—Ä—Ç–∏–∫—É–ª</th>
                                        <th className="cutting-form-table__header">–¢–æ–≤—â–∏–Ω–∞, –ú–∞—Ç–µ—Ä—ñ–∞–ª</th>
                                        <th className="cutting-form-table__header">–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th>
                                        <th className="cutting-form-table__header">–î—ñ—è</th>
                                    </tr>
                                    </thead>
                                    <tbody className="cutting-form-table__body">
                                    {jobDetails.map((detail) => (
                                        <tr key={detail.article_id} className="cutting-form-table__row">
                                            <td className="cutting-form-table__cell cutting-form-table__cell--number">
                                                <strong>{detail.article_info.article_num}</strong>
                                            </td>
                                            <td className="cutting-form-table__cell">{detail.article_info.name}</td>
                                            <td className="cutting-form-table__cell">
                                                {detail.article_info.thickness}–º–º, {detail.article_info.material_type}
                                            </td>
                                            <td className="cutting-form-table__cell cutting-form-table__cell--quantity">
                                                {detail.quantity_planned}
                                            </td>
                                            <td className="cutting-form-table__cell cutting-form-table__cell--actions">
                                                <button
                                                    type="button"
                                                    onClick={() => handleRemoveDetail(detail.article_id)}
                                                    className="cutting-form-btn cutting-form-btn--remove"
                                                >
                                                    –í–∏–¥–∞–ª–∏—Ç–∏
                                                </button>
                                            </td>
                                        </tr>
                                    ))}
                                    </tbody>
                                </table>
                            </div>
                        )}
                    </div>
                </section>

                {/* –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ */}
                <div className="cutting-form-submit">
                    <button
                        type="submit"
                        disabled={jobDetails.length === 0 || loading}
                        className="cutting-form-btn cutting-form-btn--submit"
                    >
                        {loading ? '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...' : '–°—Ç–≤–æ—Ä–∏—Ç–∏ –ó–∞–≤–¥–∞–Ω–Ω—è'}
                    </button>
                </div>
            </form>
        </div>
    );
}

export default CuttingJobForm;