import React, { useState, useEffect, useCallback } from 'react';
import { supabase } from '../supabaseClient';
import './CuttingJobExecution.css';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
const VALID_STATUSES = ['–í —á–µ—Ä–∑—ñ', '–í —Ä–æ–±–æ—Ç—ñ', '–í–∏–∫–æ–Ω–∞–Ω–æ', '–ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ', '–°–∫–∞—Å–æ–≤–∞–Ω–æ'];
const INITIAL_LOG_FORM = {
    operator_name: '',
    cut_date: '',
    start_meter: '',
    end_meter: '',
    oxygen_pressure: '',
    air_pressure: '0',
    preparation_time: '',
    cutting_time: '',
};

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

const formatToCustomString = (date) => {
    const pad = (num) => String(num).padStart(2, '0');
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    const hours = date.getHours();
    const minutes = date.getMinutes();
    const seconds = date.getSeconds();

    return `${year}-${pad(month)}-${pad(day)} ${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;
};

const calculateTotalTime = (prepTime, cutTime) => (parseInt(prepTime) || 0) + (parseInt(cutTime) || 0);

/**
 * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤–∏—Ç—Ä–∞—Ç—É –≥–∞–∑—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —Ç–∞ —Ç–∏–ø—É –≥–∞–∑—É, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤—Å—è.
 * @param {string} start - –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞.
 * @param {string} end - –ö—ñ–Ω—Ü–µ–≤–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞.
 * @param {boolean} isOxygenActive - –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤—Å—è –∫–∏—Å–µ–Ω—å (—Ç–∏—Å–∫ –≤–≤–µ–¥–µ–Ω–æ).
 * @param {boolean} isAirActive - –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–æ—Å—å –ø–æ–≤—ñ—Ç—Ä—è (—á–µ–∫–±–æ–∫—Å –≤–≤—ñ–º–∫–Ω–µ–Ω–æ).
 * @returns {string} –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –≤–∏—Ç—Ä–∞—Ç–∞ –∑ –ø–æ–∑–Ω–∞—á–∫–æ—é –≥–∞–∑—É –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
 */
const calculateGasConsumption = (start, end, isOxygenActive, isAirActive) => {
    // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∞–±–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –≥–∞–∑
    if (!start || !end || (!isOxygenActive && !isAirActive)) {
        return '--';
    }

    const startVal = parseFloat(start);
    const endVal = parseFloat(end);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤
    if (isNaN(startVal) || isNaN(endVal) || endVal < startVal) {
        return '–ü–æ–º–∏–ª–∫–∞ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞';
    }

    const consumption = (endVal - startVal).toFixed(2);

    // –î–æ–¥–∞—î–º–æ –ø–æ–∑–Ω–∞—á–∫—É, —è–∫–∏–π –≥–∞–∑ –±—É–≤ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π
    if (isOxygenActive) {
        return `${consumption} (O‚ÇÇ)`;
    }
    if (isAirActive) {
        return `${consumption} (Air)`;
    }

    // –Ø–∫—â–æ –¥–æ—Å—ñ –Ω–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ, –∞–ª–µ —Å—Ç–∞—Ä—Ç/–∫—ñ–Ω–µ—Ü—å —î
    return consumption;
};


function CuttingJobExecution({ jobId, onBack }) {
    // –û—Å–Ω–æ–≤–Ω—ñ —Å—Ç–∞–Ω–∏
    const [job, setJob] = useState(null);
    const [programId, setProgramId] = useState(null);
    const [fileNameInput, setFileNameInput] = useState('');
    const [isEditingProgramName, setIsEditingProgramName] = useState(false);
    const [detailsMap, setDetailsMap] = useState({});
    const [currentLog, setCurrentLog] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // –°—Ç–∞–Ω–∏ —Ñ–æ—Ä–º–∏
    const [logForm, setLogForm] = useState(INITIAL_LOG_FORM);
    const [jobStatusInput, setJobStatusInput] = useState('');

    // –ü–æ—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ (–ü–ï–†–ï–ú–Ü–©–ï–ù–û –°–Æ–î–ò –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ)
    const detailsToRender = Object.values(detailsMap);
    const isMainFormDisabled = !programId;
    const isButtonDisabled = loading || !programId || isEditingProgramName;
    const isLogStarting = !currentLog?.log_entry_id;

    // –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –¥–ª—è –ª–æ–≥—ñ–∫–∏ XOR —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
    const isAirUsed = logForm.air_pressure === '1';
    const isOxygenEntered = logForm.oxygen_pressure !== '';

    const totalTime = calculateTotalTime(logForm.preparation_time, logForm.cutting_time);
    const gasConsumption = calculateGasConsumption(
        logForm.start_meter,
        logForm.end_meter,
        isOxygenEntered,
        isAirUsed
    );

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    const createNotification = async (title, message, type = 'system') => {
        try {
            const { data, error } = await supabase
                .from('notifications')
                .insert([{
                    type: type,
                    title: title,
                    message: message,
                    job_id: jobId,
                    is_read: false
                }])
                .select();

            if (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
                return;
            }

            console.log('üì¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ:', data[0]);
            return data[0];
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
        }
    };

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    const redirectToInformationPage = () => {
        const url = `#/view/information?expanded=${jobId}&job_id=${jobId}`;
        console.log('üîó –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞:', url);
        window.location.hash = `/view/information?expanded=${jobId}&job_id=${jobId}`;
    };

    // –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
    const handleJobCompletion = async () => {
        try {
            // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            const notificationTitle = `–ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ${jobId} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
            const notificationMessage = `
            –†—ñ–∑–∫—É –∑–∞–≤–¥–∞–Ω–Ω—è ‚Ññ${jobId} –∑–∞–≤–µ—Ä—à–µ–Ω–æ 
            –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ${logForm.operator_name || '–Ω–µ–≤—ñ–¥–æ–º–æ'}. 
            –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: ${totalTime} —Ö–≤`; // totalTime —Ç–µ–ø–µ—Ä –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π

            await createNotification(notificationTitle, notificationMessage, 'job_completed');

            // –ü–æ–∫–∞–∑—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            if ('Notification' in window && Notification.permission === 'granted') {
                new Notification(notificationTitle, {
                    body: notificationMessage,
                    icon: '/favicon.ico'
                });
            }

            console.log('üéâ –ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ');

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
            setTimeout(() => {
                redirectToInformationPage();
            }, 1500); // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è

        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:', error);
        }
    };

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    const fetchJobData = useCallback(async () => {
        setLoading(true);
        setError(null);

        try {
            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
            const { data: jobData, error: jobError } = await supabase
                .from('cutting_jobs')
                .select('*')
                .eq('job_id', jobId)
                .single();

            if (jobError || !jobData) throw new Error("–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            setJob(jobData);
            setJobStatusInput(jobData.status);

            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏
            const { data: programData } = await supabase
                .from('cutting_programs')
                .select('program_id, file_name')
                .eq('job_id', jobId)
                .limit(1)
                .single();

            if (programData) {
                await handleProgramData(programData);
            }

            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–≤–¥–∞–Ω–Ω—è
            await fetchJobDetails();

        } catch (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', err.message);
            alert(`–ü–æ–º–∏–ª–∫–∞: ${err.message}`);

            // setError(err.message);
        } finally {
            setLoading(false);
        }
    }, [jobId]);

    const handleProgramData = async (programData) => {
        setProgramId(programData.program_id);
        setFileNameInput(programData.file_name || '');

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ª–æ–≥—É
        const { data: latestLog } = await supabase
            .from('cutting_log')
            .select('*')
            .eq('program_id', programData.program_id)
            .order('start_time', { ascending: false })
            .limit(1)
            .single();

        if (latestLog) {
            setCurrentLog(latestLog);
            setLogForm({
                operator_name: latestLog.operator_name || '',
                cut_date: latestLog.cut_date?.substring(0, 10) || '',
                start_meter: latestLog.start_meter || '',
                end_meter: latestLog.end_meter || '',
                oxygen_pressure: latestLog.oxygen_pressure || '',
                air_pressure: latestLog.air_pressure ? '1' : '0',
                preparation_time: latestLog.preparation_time_minutes || '',
                cutting_time: latestLog.cutting_time_minutes || '',
            });
        }
    };

    const renderBackButton = () => (
        <button
            onClick={onBack}
            className="back-button secondary-button"
            disabled={loading}
        >
            ‚Üê –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É
        </button>
    );

    const fetchJobDetails = async () => {
        const { data: detailsArray, error: detailsError } = await supabase
            .from('job_details')
            .select(`
                job_detail_id, quantity_planned, quantity_actual, rejection_count, program_id, job_id, article_id,
                articles (name, thickness, material_type, article_num)
            `)
            .eq('job_id', jobId);

        if (detailsError) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π:', detailsError);
            return;
        }

        const detailsToObject = detailsArray?.reduce((acc, detail) => {
            acc[detail.job_detail_id] = {
                ...detail,
                quantity_actual_input: detail.quantity_actual || '',
                rejection_count_input: detail.rejection_count || '0'
            };
            return acc;
        }, {}) || {};

        setDetailsMap(detailsToObject);
    };

    useEffect(() => {
        if (jobId) fetchJobData();
    }, [fetchJobData, jobId]);

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    const handleProgramNameChange = (e) => setFileNameInput(e.target.value);

    const handleCreateProgram = async () => {
        if (!fileNameInput) {
            setError('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–≥—Ä–∞–º–∏');
            return;
        }

        setLoading(true);
        try {
            const { data: newProgram, error: programError } = await supabase
                .from('cutting_programs')
                .insert([{ job_id: jobId, file_name: fileNameInput }])
                .select('program_id, file_name')
                .single();

            if (programError) throw programError;

            setProgramId(newProgram.program_id);
            setIsEditingProgramName(false);

            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
            if (job.status === '–°—Ç–≤–æ—Ä–µ–Ω–æ') {
                await updateJobStatus('–í —Ä–æ–±–æ—Ç—ñ');
            }

        } catch (err) {
            // setError(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏: ${err.message}`);
            alert(`–ü–æ–º–∏–ª–∫–∞: ${err.message}`);
        } finally {
            setLoading(false);
        }
    };

    const handleUpdateProgramName = async () => {
        if (!fileNameInput || !programId) return;

        setLoading(true);
        try {
            await supabase
                .from('cutting_programs')
                .update({ file_name: fileNameInput })
                .eq('program_id', programId);

            setIsEditingProgramName(false);
        } catch (err) {
            alert(`–ü–æ–º–∏–ª–∫–∞: ${err.message}`);
            // setError(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–∑–≤–∏: ${err.message}`);
        } finally {
            setLoading(false);
        }
    };

    const handleLogFormChange = (e) => {
        const { name, value, type, checked } = e.target;

        let newValue = value;
        let updates = {};

        if (name === 'air_pressure' && type === 'checkbox') {
            newValue = checked ? '1' : '0';

            // –õ–û–ì–Ü–ö–ê XOR: –Ø–∫—â–æ –ø–æ–≤—ñ—Ç—Ä—è –≤–≤—ñ–º–∫–Ω–µ–Ω–æ ('1'), —Å–∫–∏–¥–∞—î–º–æ —Ç–∏—Å–∫ –∫–∏—Å–Ω—é
            if (newValue === '1') {
                updates.oxygen_pressure = '';
            }

            updates.air_pressure = newValue;
        } else {
            // –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–ª—ñ–≤
            updates[name] = newValue;
        }

        // –õ–û–ì–Ü–ö–ê XOR: –Ø–∫—â–æ –≤–≤–æ–¥–∏—Ç—å—Å—è —Ç–∏—Å–∫ –∫–∏—Å–Ω—é —ñ –≤—ñ–Ω –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Å–∫–∏–¥–∞—î–º–æ –ø–æ–≤—ñ—Ç—Ä—è
        if (name === 'oxygen_pressure' && newValue !== '') {
            updates.air_pressure = '0';
        }

        // –Ø–∫—â–æ –∑–º—ñ–Ω–∞ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –∫–∏—Å–Ω—é –∞–±–æ –ø–æ–≤—ñ—Ç—Ä—è, –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ª–æ–≥—ñ–∫—É XOR
        if (name === 'oxygen_pressure' || name === 'air_pressure') {
            setLogForm(prev => ({
                ...prev,
                ...updates
            }));
        } else {
            // –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –ø–æ–ª—ñ–≤
            setLogForm(prev => ({ ...prev, [name]: newValue }));
        }
    };

    const handleDetailInputChange = (jobDetailId, field, value) => {
        setDetailsMap(prev => ({
            ...prev,
            [jobDetailId]: {
                ...prev[jobDetailId],
                [field]: value === '' ? '' : parseInt(value) || 0
            }
        }));
    };

    const handleStatusChange = (e) => setJobStatusInput(e.target.value);

    const updateJobDetails = async () => {
        try {
            const updates = Object.values(detailsMap);

            console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–≤–¥–∞–Ω–Ω—è:', updates);

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—É –¥–µ—Ç–∞–ª—å –æ–∫—Ä–µ–º–æ
            for (const detail of updates) {
                const updateData = {
                    quantity_actual: detail.quantity_actual_input === '' ? null : parseInt(detail.quantity_actual_input) || 0,
                    rejection_count: detail.rejection_count_input === '' ? null : parseInt(detail.rejection_count_input) || 0
                };

                console.log(`üìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—ñ ${detail.job_detail_id}:`, updateData);

                const { error } = await supabase
                    .from('job_details')
                    .update(updateData)
                    .eq('job_detail_id', detail.job_detail_id);

                if (error) {
                    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—ñ ${detail.job_detail_id}:`, error);
                    throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—ñ: ${error.message}`);
                }
            }

            console.log('‚úÖ –í—Å—ñ –¥–µ—Ç–∞–ª—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ');

        } catch (err) {
            alert(`–ü–æ–º–∏–ª–∫–∞: ${err.message}`);
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π:', err);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π: ${err.message}`);
        }
    };

    const updateJobStatus = async (status) => {
        console.log(jobId)
        const { error } = await supabase
            .from('cutting_jobs')
            .update({ status })
            .eq('job_id', jobId);

        if (error) throw error;
        setJob(prev => ({ ...prev, status }));
        setJobStatusInput(status);
    };

    const handleSaveData = async () => {
        if (!programId) {
            alert('–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É —Ä—ñ–∑–∞–Ω–Ω—è'); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ alert –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            return;
        }

        setLoading(true);
        // setError(null); // –¶–µ–π —Ä—è–¥–æ–∫ –º–æ–∂–Ω–∞ –∑–∞–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏, —è–∫—â–æ –≤–∏ –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ setError –¥–ª—è –≤–∏–≤–æ–¥—É –Ω–∞ –µ–∫—Ä–∞–Ω

        try {
            console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...');

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
            validateForm(); // –Ø–∫—â–æ —Ç—É—Ç –±—É–¥–µ –ø–æ–º–∏–ª–∫–∞, –≤–æ–Ω–∞ –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ–π–¥–µ –≤ –±–ª–æ–∫ catch
            console.log('‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π–¥–µ–Ω–∞');

            // 1. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–≥—É —Ä—ñ–∑–∞–Ω–Ω—è
            console.log('üìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–≥—É —Ä—ñ–∑–∞–Ω–Ω—è...');
            await updateCuttingLog();
            console.log('‚úÖ –õ–æ–≥ —Ä—ñ–∑–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ');

            // 2. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–≤–¥–∞–Ω–Ω—è
            console.log('üîß –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–≤–¥–∞–Ω–Ω—è...');
            await updateJobDetails();
            console.log('‚úÖ –î–µ—Ç–∞–ª—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ');

            // 3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è
            if (jobStatusInput !== job.status) {
                console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è...');
                await updateJobStatus(jobStatusInput);
                console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ');

                // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ "–í–∏–∫–æ–Ω–∞–Ω–æ" - –æ–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                if (jobStatusInput === '–í–∏–∫–æ–Ω–∞–Ω–æ') {
                    console.log('üéØ –ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ–±—Ä–æ–±–ª—è—î–º–æ...');
                    await handleJobCompletion();
                    return; // –ù–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ, –±–æ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
                }
            }

            console.log('üéâ –í—Å—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
            alert('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ'); // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö

        } catch (err) {
            console.error('üí• –ü–æ–≤–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', err);
            // üìå –ö–õ–Æ–ß–û–í–ê –ó–ú–Ü–ù–ê: –í–∏–≤—ñ–¥ –ø–æ–º–∏–ª–∫–∏ –≤ alert()
            alert(`–ü–æ–º–∏–ª–∫–∞: ${err.message}`);
            // setError(null); // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞–ª–∞—Å—è, —Å–∫–∏–¥–∞—î–º–æ —ó—ó, —â–æ–± –Ω–µ –∑–∞–≤–∞–∂–∞–ª–∞

            // ‚ùå –í–ê–ñ–õ–ò–í–û: –ú–∏ –ù–ï —Å–∫–∏–¥–∞—î–º–æ logForm —á–∏ detailsMap, —Ç–æ–º—É —ñ–Ω–ø—É—Ç–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è.

        } finally {
            setLoading(false);
        }
    };

    const validateForm = () => {
        const isLogFinishing = jobStatusInput === '–í–∏–∫–æ–Ω–∞–Ω–æ';

        if (isLogStarting && (!logForm.operator_name || !logForm.start_meter)) {
            throw new Error('–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–∞ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫');
        }

        if (isLogFinishing && (!logForm.end_meter || parseFloat(logForm.end_meter) <= parseFloat(logForm.start_meter))) {
            throw new Error('–ö—ñ–Ω—Ü–µ–≤–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º –∑–∞ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π');
        }
    };

    const updateCuttingLog = async () => {
        try {
            const logUpdates = {
                operator_name: logForm.operator_name,
                oxygen_pressure: logForm.oxygen_pressure || null,
                air_pressure: parseInt(logForm.air_pressure) || 0,
                start_meter: parseFloat(logForm.start_meter) || null,
                end_meter: parseFloat(logForm.end_meter) || null,
                cut_date: logForm.cut_date || null,
                preparation_time_minutes: parseInt(logForm.preparation_time) || null,
                cutting_time_minutes: parseInt(logForm.cutting_time) || null,
                end_time: formatToCustomString(new Date())
            };

            console.log('üìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–≥—É —Ä—ñ–∑–∞–Ω–Ω—è:', logUpdates);

            let updatedLogData;

            if (currentLog?.log_entry_id) {
                // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ª–æ–≥—É
                const { data, error } = await supabase
                    .from('cutting_log')
                    .update(logUpdates)
                    .eq('log_entry_id', currentLog.log_entry_id)
                    .select('*')
                    .single();

                if (error) throw error;
                updatedLogData = data;
                console.log('‚úÖ –Ü—Å–Ω—É—é—á–∏–π –ª–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ');
            } else {
                // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ª–æ–≥—É
                const { data, error } = await supabase
                    .from('cutting_log')
                    .insert([{
                        program_id: programId,
                        ...logUpdates,
                        start_time: formatToCustomString(new Date())
                    }])
                    .select('*')
                    .single();

                if (error) throw error;
                updatedLogData = data;
                console.log('‚úÖ –ù–æ–≤–∏–π –ª–æ–≥ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
            }

            if (updatedLogData) {
                setCurrentLog(updatedLogData);
                console.log('‚úÖ –õ–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å—Ç–∞–Ω—ñ');
            }

        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–≥—É:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–≥—É: ${error.message}`);
        }
    };

    // –†–µ–Ω–¥–µ—Ä —Ñ—É–Ω–∫—Ü—ñ—ó (–∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏)
    const renderProgramBlock = () => (
        <div className="program-control-block">
            {programId ? (
                <div className="program-input-box">
                    <div className="program-input-row">
                        <label>
                            –ù–∞–∑–≤–∞ –§–∞–π–ª—É –ü—Ä–æ–≥—Ä–∞–º–∏:
                            <input
                                type="text"
                                value={fileNameInput}
                                onChange={handleProgramNameChange}
                                placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: Sheet123.nc"
                                disabled={!isEditingProgramName}
                            />
                        </label>

                        {isEditingProgramName ? (
                            <button onClick={handleUpdateProgramName} disabled={loading || !fileNameInput}>
                                –ó–±–µ—Ä–µ–≥—Ç–∏ –ù–∞–∑–≤—É
                            </button>
                        ) : (
                            <button onClick={() => setIsEditingProgramName(true)} disabled={loading}>
                                –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                            </button>
                        )}
                    </div>
                    <p className="program-id-display">ID: {programId}</p>
                </div>
            ) : (
                <div className="warning-box program-input-box">
                    <p>–°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É —Ä—ñ–∑–∞–Ω–Ω—è –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏</p>
                    <div className="program-input-row">
                        <label>
                            –ù–∞–∑–≤–∞ –§–∞–π–ª—É –ü—Ä–æ–≥—Ä–∞–º–∏:
                            <input
                                type="text"
                                value={fileNameInput}
                                onChange={handleProgramNameChange}
                                placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: Sheet123.nc"
                            />
                        </label>
                        <button onClick={handleCreateProgram} disabled={loading || !fileNameInput}>
                            –°—Ç–≤–æ—Ä–∏—Ç–∏ –ü—Ä–æ–≥—Ä–∞–º—É
                        </button>
                    </div>
                </div>
            )}
        </div>
    );

    const renderOperatorControl = () => (
        <div className="operator-control">
            <label>
                –û–ø–µ—Ä–∞—Ç–æ—Ä
                <input
                    type="text"
                    name="operator_name"
                    value={logForm.operator_name}
                    onChange={handleLogFormChange}
                    placeholder="–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                    disabled={isMainFormDisabled}
                />
            </label>

            <label>
                –î–∞—Ç–∞ —Ä—ñ–∑–∞–Ω–Ω—è
                <input
                    type="date"
                    name="cut_date"
                    value={logForm.cut_date}
                    onChange={handleLogFormChange}
                    disabled={isMainFormDisabled}
                />
            </label>

            <label>
                –°—Ç–∞—Ç—É—Å
                <select value={jobStatusInput} onChange={handleStatusChange} disabled={isMainFormDisabled}>
                    {VALID_STATUSES.map(status => (
                        <option key={status} value={status}>{status}</option>
                    ))}
                </select>
            </label>
        </div>
    );

    const renderDetailsTable = () => (
        <table className="full-width-table">
            <thead>
            <tr>
                <th>–ê—Ä—Ç–∏–∫—É–ª</th>
                <th>–ü–ª–∞–Ω</th>
                <th>–ë—Ä–∞–∫</th>
                <th>–ú–∞—Ç–µ—Ä—ñ–∞–ª</th>
                <th>–¢–æ–≤—â–∏–Ω–∞, –º–º</th>
                <th>–§–∞–∫—Ç</th>
            </tr>
            </thead>
            <tbody>
            {detailsToRender.map((detail) => (
                <tr key={detail.job_detail_id}>

                    <td><>{detail.articles?.name}</> <br/> <h5>{detail.articles?.article_num}</h5></td>
                    <td>{detail.quantity_planned}</td>
                    <td>
                        <input
                            type="number"
                            min="0"
                            value={detail.rejection_count_input}
                            onChange={(e) => handleDetailInputChange(detail.job_detail_id, 'rejection_count_input', e.target.value)}
                            disabled={isMainFormDisabled}
                        />
                    </td>
                    <td>{detail.articles?.material_type}</td>
                    <td>{detail.articles?.thickness}</td>
                    <td>
                        <input
                            type="number"
                            min="0"
                            value={detail.quantity_actual_input}
                            onChange={(e) => handleDetailInputChange(detail.job_detail_id, 'quantity_actual_input', e.target.value)}
                            disabled={isMainFormDisabled}
                        />
                    </td>
                </tr>
            ))}
            </tbody>
        </table>
    );

    const renderAdditionalParams = () => {
        // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —É–º–æ–≤ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–∏—Ö —Å—Ç–∞–Ω—ñ–≤
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ isAirUsed —Ç–∞ isOxygenEntered, –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –Ω–∞ —Ä—ñ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        return (
            <div className="additional-log-params">
                <div className="time-inputs">
                    <label>
                        –ß–∞—Å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ (—Ö–≤):
                        <input
                            type="number"
                            name="preparation_time"
                            value={logForm.preparation_time}
                            onChange={handleLogFormChange}
                            disabled={isMainFormDisabled}
                            min="0"
                            placeholder="0"
                        />
                    </label>

                    <label>
                        –ß–∞—Å —Ä—ñ–∑–∫–∏ (—Ö–≤):
                        <input
                            type="number"
                            name="cutting_time"
                            value={logForm.cutting_time}
                            onChange={handleLogFormChange}
                            disabled={isMainFormDisabled}
                            min="0"
                            placeholder="0"
                        />
                    </label>
                </div>

                <div className="meter-inputs">
                    <label>
                        –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫:
                        <input
                            type="number"
                            name="start_meter"
                            value={logForm.start_meter}
                            onChange={handleLogFormChange}
                            disabled={isMainFormDisabled}
                            step="0.01"
                            placeholder="–û–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–ª—è –ø–æ—á–∞—Ç–∫—É"
                        />
                    </label>

                    <label>
                        –ö—ñ–Ω—Ü–µ–≤–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫:
                        <input
                            type="number"
                            name="end_meter"
                            value={logForm.end_meter}
                            onChange={handleLogFormChange}
                            disabled={isMainFormDisabled}
                            step="0.01"
                            placeholder="–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"
                        />
                    </label>
                </div>

                <div className="pressure-inputs">
                    <label>
                        –¢–∏—Å–∫ –∫–∏—Å–Ω—é (–±–∞—Ä):
                        <input
                            type="number"
                            name="oxygen_pressure"
                            value={logForm.oxygen_pressure}
                            onChange={handleLogFormChange}
                            disabled={isMainFormDisabled || isAirUsed} /* –í–ò–ö–õ–Æ–ß–ï–ù–ù–Ø 1: –í–∏–º–∫–Ω—É—Ç–∏, —è–∫—â–æ –ü–æ–≤—ñ—Ç—Ä—è –≤–≤—ñ–º–∫–Ω–µ–Ω–æ */
                            step="0.1"
                        />
                    </label>

                    <label className="checkbox-label">
                        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–æ—Å—å –ø–æ–≤—ñ—Ç—Ä—è
                        <input
                            type="checkbox"
                            name="air_pressure"
                            checked={isAirUsed}
                            onChange={handleLogFormChange}
                            disabled={isMainFormDisabled || isOxygenEntered} /* –í–ò–ö–õ–Æ–ß–ï–ù–ù–Ø 2: –í–∏–º–∫–Ω—É—Ç–∏, —è–∫—â–æ –ö–∏—Å–µ–Ω—å –≤–≤–µ–¥–µ–Ω–æ */
                        />
                    </label>
                </div>
            </div>
        )};

    const renderActionButtons = () => (
        <div className="action-buttons-container">
            <button
                onClick={handleSaveData}
                disabled={isButtonDisabled}
                className={jobStatusInput === '–í–∏–∫–æ–Ω–∞–Ω–æ' ? 'end-button' : 'save-button'}
            >
                {jobStatusInput === '–í–∏–∫–æ–Ω–∞–Ω–æ' ? '–ó–ë–ï–†–ï–ì–¢–ò & –í–ò–ö–û–ù–ê–ù–û' : '–ó–±–µ—Ä–µ–≥—Ç–∏ –î–∞–Ω—ñ'}
            </button>

            {isLogStarting && programId && (
                <p className="hint-info error-text">
                    –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–∞ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫
                </p>
            )}

            {!programId &&
                <p className="hint-info error-text">
                    –°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏
                </p>
            }
        </div>
    );

    // –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    if (loading && !job) return <div className="loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è ‚Ññ{jobId}...</div>;
    // if (error) return <div className="error">–ü–æ–º–∏–ª–∫–∞: {error}</div>;
    if (!job) return <div className="error">–ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ{jobId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</div>;

    return (
        <div className="execution-container">
            <div className="execution-header">
                <h1>–í–∏–∫–æ–Ω–∞–Ω–Ω—è –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ{jobId}</h1>
                {/*{renderBackButton()}*/}
            </div>

            <div className="job-info">
                <p><strong>–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞ –∑–¥–∞—á—ñ:</strong> {job.due_date ? new Date(job.due_date).toLocaleDateString('uk-UA') : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
                <p className="notes-snippet"><strong>–ü—Ä–∏–º—ñ—Ç–∫–∏:</strong> {job.notes ? job.notes : '–ù–µ–º–∞—î'}</p>
            </div>

            {error && <div className="error-box">{error}</div>}

            {renderProgramBlock()}

            {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —á–∞—Å —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏ */}
            <div className="time-meters-info">
                <div className="info-group">
                    <label>–ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞—Ç—Ä–∞—á–µ–Ω–∏–π —á–∞—Å</label>
                    <span className="info-value">{totalTime} —Ö–≤</span>
                </div>
                <div className="info-group">
                    <label>–í–∏—Ç—Ä–∞—Ç–∞ –≥–∞–∑—É</label>
                    <span className="info-value">{gasConsumption}</span>
                </div>
            </div>

            {renderOperatorControl()}

            <section className="job-results-section">
                {renderDetailsTable()}
                {renderAdditionalParams()}
                {renderActionButtons()}
            </section>
        </div>
    );
}

export default CuttingJobExecution;