// components/NotificationCenterDB.js
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useNotificationsDB } from '../hooks/useNotificationsDB';
import './NotificationCenter.css';

const NotificationCenterDB = () => {
    const {
        notifications,
        unreadCount,
        loading,
        markAsRead,
        deleteNotification,
        clearAllNotifications,
        manualCheckForNewNotifications,
        startAutoRefresh,
        stopAutoRefresh,
        isAutoRefreshActive,
        getAutoRefreshStatus
    } = useNotificationsDB();

    const [isOpen, setIsOpen] = useState(false);
    const [autoRefreshEnabled, setAutoRefreshEnabled] = useState(true);
    const dropdownRef = useRef(null);

    // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –º–æ–¥–∞–ª—å–Ω–∏–º –≤—ñ–∫–Ω–æ–º
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–ª—ñ–∫ –Ω–µ –ø–æ –∫–Ω–æ–ø—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å
                const notificationButton = document.querySelector('.notification-button');
                if (notificationButton && !notificationButton.contains(event.target)) {
                    setIsOpen(false);
                }
            }
        };

        if (isOpen) {
            document.addEventListener('mousedown', handleClickOutside);
            document.addEventListener('touchstart', handleClickOutside);
        }

        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
            document.removeEventListener('touchstart', handleClickOutside);
        };
    }, [isOpen]);

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª–∞–≤—ñ—à—ñ Escape
    useEffect(() => {
        const handleEscapeKey = (event) => {
            if (event.key === 'Escape' && isOpen) {
                setIsOpen(false);
            }
        };

        if (isOpen) {
            document.addEventListener('keydown', handleEscapeKey);
        }

        return () => {
            document.removeEventListener('keydown', handleEscapeKey);
        };
    }, [isOpen]);

    // –í–∏–¥–∞–ª—è—î–º–æ useEffect –¥–ª—è –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ,
    // —Ç–æ–º—É —â–æ —Ç–µ–ø–µ—Ä –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î –∑–∞–≤–∂–¥–∏

    // –î–æ–¥–∞—î–º–æ –ª–æ–≥—ñ–∫—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É
    useEffect(() => {
        const status = getAutoRefreshStatus();
        console.log('üîß –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', {
            isOpen,
            autoRefreshEnabled,
            isAutoRefreshActive,
            status
        });
    }, [isOpen, autoRefreshEnabled, isAutoRefreshActive, getAutoRefreshStatus]);

    // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–º–∏–∫–∞—á–∞
    const toggleAutoRefresh = useCallback(() => {
        if (autoRefreshEnabled) {
            console.log('üî¥ –í–∏–º–∫–Ω–µ–Ω–Ω—è –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è');
            stopAutoRefresh();
            setAutoRefreshEnabled(false);
        } else {
            console.log('üü¢ –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è');
            startAutoRefresh();
            setAutoRefreshEnabled(true);
        }
    }, [autoRefreshEnabled, startAutoRefresh, stopAutoRefresh]);

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Å—Ç–æ—ñ–Ω–∫–∏
    useEffect(() => {
        const handleVisibilityChange = () => {
            if (document.hidden) {
                console.log('üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ - –∑—É–ø–∏–Ω—è—î–º–æ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è');
                stopAutoRefresh();
            } else if (autoRefreshEnabled) {
                console.log('üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è');
                startAutoRefresh();
            }
        };

        document.addEventListener('visibilitychange', handleVisibilityChange);

        return () => {
            document.removeEventListener('visibilitychange', handleVisibilityChange);
        };
    }, [autoRefreshEnabled, startAutoRefresh, stopAutoRefresh]);

    const handleNotificationClick = async (notification) => {
        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ –ø—Ä–∏ –∫–ª—ñ–∫—É
        if (!notification.is_read) {
            await markAsRead(notification.id);
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        if (notification.job_id) {
            window.location.href = `#/view/jobs?id=${notification.job_id}`;
        }

        // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        setIsOpen(false);
    };

    const formatTime = (timestamp) => {
        const date = new Date(timestamp);
        const now = new Date();
        const diffMs = now - date;
        const diffMins = Math.floor(diffMs / 60000);
        const diffHours = Math.floor(diffMs / 3600000);
        const diffDays = Math.floor(diffMs / 86400000);

        if (diffMins < 1) return '—â–æ–π–Ω–æ';
        if (diffMins < 60) return `${diffMins} —Ö–≤ —Ç–æ–º—É`;
        if (diffHours < 24) return `${diffHours} –≥–æ–¥ —Ç–æ–º—É`;
        if (diffDays < 7) return `${diffDays} –¥–Ω —Ç–æ–º—É`;

        return date.toLocaleDateString('uk-UA', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    };

    const getNotificationIcon = (type) => {
        switch (type) {
            case 'new_job': return 'üÜï';
            case 'job_completed': return '‚úÖ';
            case 'system': return '‚ÑπÔ∏è';
            default: return 'üì¢';
        }
    };

    if (loading && notifications.length === 0) {
        return (
            <div className="notification-center">
                <button className="notification-button" disabled>
                    ‚è≥
                </button>
            </div>
        );
    }

    return (
        <div className="notification-center">
            <button
                className="notification-button"
                onClick={() => setIsOpen(!isOpen)}
                title="–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
            >
                üì¢
                {unreadCount > 0 && (
                    <span className="notification-badge">
                        {unreadCount > 9 ? '9+' : unreadCount}
                    </span>
                )}
            </button>

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è */}
            <div className="test-buttons">
                <button
                    onClick={manualCheckForNewNotifications}
                    className="test-btn"
                    title="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
                >
                    üîÑ
                </button>
            </div>

            {isOpen && (
                <div
                    className="notification-dropdown"
                    ref={dropdownRef}
                    onClick={(e) => e.stopPropagation()} // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –∑–∞–∫—Ä–∏—Ç—Ç—é –ø—Ä–∏ –∫–ª—ñ–∫—É –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ
                >
                    <div className="notification-header">
                        <div>
                            <h3>üì¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è</h3>
                            <div className="connection-status">
                                <div>–í—Å—å–æ–≥–æ: {notifications.length} —Å–ø–æ–≤—ñ—â–µ–Ω—å</div>
                                <div>–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö: {unreadCount}</div>
                                <div>
                                    –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è:
                                    <span className={`status-indicator ${isAutoRefreshActive ? 'active' : 'inactive'}`}>
                                        {isAutoRefreshActive ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–µ' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–µ'}
                                    </span>
                                </div>
                                <div>
                                    –ê–≤—Ç–æ-–æ–Ω–æ–≤–ª–µ–Ω–Ω—è:
                                    <button
                                        onClick={toggleAutoRefresh}
                                        className={`auto-refresh-btn ${autoRefreshEnabled ? 'enabled' : 'disabled'}`}
                                    >
                                        {autoRefreshEnabled ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div className="notification-actions">
                            {unreadCount > 0 && (
                                <button onClick={() => markAsRead()}>–ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –≤—Å—ñ</button>
                            )}
                            {notifications.length > 0 && (
                                <button onClick={clearAllNotifications}>–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ</button>
                            )}
                            {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è */}
                            <button
                                className="close-dropdown-btn"
                                onClick={() => setIsOpen(false)}
                                title="–ó–∞–∫—Ä–∏—Ç–∏"
                            >
                                √ó
                            </button>
                        </div>
                    </div>

                    <div className="notification-list">
                        {notifications.length === 0 ? (
                            <div className="no-notifications">
                                üì≠ –ù–µ–º–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω—å
                            </div>
                        ) : (
                            notifications.map((notification) => (
                                <div
                                    key={notification.id}
                                    className={`notification-item ${!notification.is_read ? 'unread' : ''}`}
                                >
                                    <div
                                        className="notification-content"
                                        onClick={() => handleNotificationClick(notification)}
                                    >
                                        <div className="notification-icon">
                                            {getNotificationIcon(notification.type)}
                                        </div>
                                        <div className="notification-text">
                                            <div className="notification-title">
                                                {notification.title}
                                            </div>
                                            <div className="notification-message">
                                                {notification.message}
                                            </div>
                                            <div className="notification-time">
                                                {formatTime(notification.created_at)}
                                                {notification.job_id && ` ‚Ä¢ –ó–∞–≤–¥–∞–Ω–Ω—è #${notification.job_id}`}
                                            </div>
                                        </div>
                                    </div>
                                    <button
                                        className="delete-notification-btn"
                                        onClick={(e) => {
                                            e.stopPropagation();
                                            deleteNotification(notification.id);
                                        }}
                                        title="–í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
                                    >
                                        √ó
                                    </button>
                                </div>
                            ))
                        )}
                    </div>

                    {notifications.length > 0 && (
                        <div className="notification-footer">
                            <div className="notification-stats">
                                {autoRefreshEnabled ? (
                                    <>üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 8 —Å–µ–∫—É–Ω–¥</>
                                ) : (
                                    <>‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ</>
                                )}
                            </div>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

export default NotificationCenterDB;