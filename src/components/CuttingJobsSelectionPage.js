import React, { useState, useEffect, useCallback } from 'react';
import { supabase } from '../supabaseClient';
import { useNavigate, useParams } from 'react-router-dom'; // –î–æ–¥–∞–Ω–æ useNavigate
import './CuttingJobsSelectionPage.css';

function CuttingJobsSelectionPage() {
    const [allJobs, setAllJobs] = useState([]);
    const [filteredJobs, setFilteredJobs] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const navigate = useNavigate();
    const { jobId: urlJobId } = useParams(); // –û—Ç—Ä–∏–º—É—î–º–æ jobId –∑ URL —è–∫—â–æ —î

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å
    const fetchCuttingJobs = useCallback(async () => {
        setLoading(true);
        setError(null);
        try {
            const { data, error } = await supabase
                .from('cutting_jobs')
                .select('*')
                .order('job_id', { ascending: false });

            if (error) throw error;

            setAllJobs(data);

            if (searchTerm.length === 0) {
                setFilteredJobs(data);
            }

            // –Ø–∫—â–æ —î jobId –≤ URL, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–µ –∑–∞–≤–¥–∞–Ω–Ω—è
            if (urlJobId) {
                const jobExists = data.find(job => job.job_id === parseInt(urlJobId));
                if (jobExists) {
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
                    handleSelectJob(jobExists);
                } else {
                    setError(`–ó–∞–≤–¥–∞–Ω–Ω—è –∑ ID ${urlJobId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
                }
            }
        } catch (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å:', err.message);
            setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å.');
        } finally {
            setLoading(false);
        }
    }, [searchTerm, urlJobId]);

    useEffect(() => {
        fetchCuttingJobs();
    }, [fetchCuttingJobs]);

    // –§—É–Ω–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –ø–æ URL
    const handleSelectJob = (job) => {
        navigate(`/operator/${job.job_id}`);
    };

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    const handleBackToListAndRefresh = () => {
        navigate('/operator');
        fetchCuttingJobs();
    };

    // –õ–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É/—Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    useEffect(() => {
        if (searchTerm.length > 0) {
            const lowerCaseSearch = searchTerm.toLowerCase();
            const results = allJobs.filter(job =>
                job.job_id.toString().includes(lowerCaseSearch) ||
                (job.notes && job.notes.toLowerCase().includes(lowerCaseSearch))
            );
            setFilteredJobs(results);
        } else {
            setFilteredJobs(allJobs);
        }
    }, [searchTerm, allJobs]);

    // –Ø–∫—â–æ —î jobId –≤ URL —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫
    if (urlJobId && !loading) {
        return (
            <div className="loading-container">
                <p>–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è #{urlJobId}...</p>
            </div>
        );
    }

    // –†–µ–∂–∏–º –≤–∏–±–æ—Ä—É –∑–∞–≤–¥–∞–Ω–Ω—è
    return (
        <div className="jobs-selection-container">
            <h1>–í–∏–±—ñ—Ä –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –í–∏–∫–æ–Ω–∞–Ω–Ω—è üè≠</h1>

            <div className="search-controls">
                <input
                    type="text"
                    placeholder="–ü–æ—à—É–∫ –∑–∞ ‚Ññ –ó–∞–≤–¥–∞–Ω–Ω—è –∞–±–æ –ü—Ä–∏–º—ñ—Ç–∫–∞–º–∏..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    disabled={loading}
                />
            </div>

            {loading && <p className="loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å...</p>}
            {error && <p className="error">{error}</p>}

            <div className="jobs-list" style={{textAlign: "left"}}>
                {filteredJobs.length === 0 && !loading && (
                    <p>–ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p>
                )}

                {filteredJobs.map((job) => (
                    <div
                        key={job.job_id}
                        className={`job-card status-${job.status.replace(/\s/g, '').toLowerCase()}`}
                        onClick={() => handleSelectJob(job)}
                    >
                        <div className="job-info">
                            <h3>–ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ{job.job_id}</h3>
                            <p>–°—Ç–∞—Ç—É—Å: <span className="status-badge status-text">{job.status}</span></p>
                            <p>–ü–ª–∞–Ω: {job.due_date ? new Date(job.due_date).toLocaleDateString('uk-UA') : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
                            <p className="notes-snippet">–ü—Ä–∏–º—ñ—Ç–∫–∏: {job.notes ? job.notes : '–ù–µ–º–∞—î'}</p>
                        </div>
                        {/*<div className="job-status-indicator">*/}
                        {/*    <button className="select-button">–û–±—Ä–∞—Ç–∏ ‚Üí</button>*/}
                        {/*</div>*/}
                    </div>
                ))}
            </div>
        </div>
    );
}

export default CuttingJobsSelectionPage;