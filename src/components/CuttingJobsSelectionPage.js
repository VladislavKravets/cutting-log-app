import React, { useState, useEffect, useCallback } from 'react';
import { supabase } from '../supabaseClient';
import CuttingJobExecution from './CuttingJobExecution.js'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ–æ—Ä–º—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
import './CuttingJobsSelectionPage.css';

function CuttingJobsSelectionPage() {
    // –°—Ç–∞–Ω –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    const [allJobs, setAllJobs] = useState([]);
    // –°—Ç–∞–Ω –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É/—Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    const [filteredJobs, setFilteredJobs] = useState([]);
    // –°—Ç–∞–Ω –¥–ª—è —Ç–µ–∫—Å—Ç—É –ø–æ—à—É–∫—É
    const [searchTerm, setSearchTerm] = useState('');
    // –°—Ç–∞–Ω –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
    const [selectedJob, setSelectedJob] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    // --- –õ–û–ì–Ü–ö–ê –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ó–ê–í–î–ê–ù–¨ ---
    
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å
    const fetchCuttingJobs = useCallback(async () => {
        setLoading(true);
        setError(null);
        try {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –í–°–Ü –∑–∞–≤–¥–∞–Ω–Ω—è, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ –±–∞—á–∏—Ç–∏ —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å –≤–∏–∫–æ–Ω–∞–Ω—ñ
            const { data, error } = await supabase
                .from('cutting_jobs')
                .select('*')
                .order('job_id', { ascending: false });

            if (error) throw error;
            
            setAllJobs(data);
            // –ü—Ä–∏ –ø–æ—á–∞—Ç–∫–æ–≤–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–±–æ —è–∫—â–æ –ø–æ—à—É–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
            if (searchTerm.length === 0) { 
                 setFilteredJobs(data); 
            }
        } catch (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å:', err.message);
            setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å.');
        } finally {
            setLoading(false);
        }
    }, [searchTerm]); 

    useEffect(() => {
        fetchCuttingJobs();
    }, [fetchCuttingJobs]);
    
    // --- –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –ù–ê–ó–ê–î –¢–ê –û–ù–û–í–õ–ï–ù–ù–Ø ---
    // –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —É —Ñ–æ—Ä–º—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.
    // –í–æ–Ω–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î, —â–æ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.
    const handleBackToListAndRefresh = () => {
        // 1. –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        setSelectedJob(null); 
        // 2. –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –∑–º—ñ–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É)
        fetchCuttingJobs();
    };


    // --- –õ–û–ì–Ü–ö–ê –ü–û–®–£–ö–£/–§–Ü–õ–¨–¢–†–ê–¶–Ü–á ---

    useEffect(() => {
        if (searchTerm.length > 0) {
            const lowerCaseSearch = searchTerm.toLowerCase();
            const results = allJobs.filter(job => 
                // –®—É–∫–∞—î–º–æ –ø–æ ID –∞–±–æ –ü—Ä–∏–º—ñ—Ç–∫–∞—Ö
                job.job_id.toString().includes(lowerCaseSearch) ||
                (job.notes && job.notes.toLowerCase().includes(lowerCaseSearch))
            );
            setFilteredJobs(results);
        } else {
            setFilteredJobs(allJobs);
        }
    }, [searchTerm, allJobs]);


    // --- –†–ï–ù–î–ï–†: –í–ò–ë–Ü–† vs –í–ò–ö–û–ù–ê–ù–ù–Ø ---

    if (selectedJob) {
        // –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ñ–æ—Ä–º–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        return (
            <div className="job-execution-mode">
                <button 
                    onClick={handleBackToListAndRefresh} 
                    className="back-button"
                    disabled={loading} // –ë–ª–æ–∫—É—î–º–æ, –ø–æ–∫–∏ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                >
                    ‚Üê –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å
                </button>
                {/* –ü–µ—Ä–µ–¥–∞—î–º–æ ID –æ–±—Ä–∞–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è —É —Ñ–æ—Ä–º—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è */}
                <CuttingJobExecution jobId={selectedJob.job_id} />
            </div>
        );
    }

    // –†–µ–∂–∏–º –≤–∏–±–æ—Ä—É –∑–∞–≤–¥–∞–Ω–Ω—è
    return (
        <div className="jobs-selection-container">
            <h1>–í–∏–±—ñ—Ä –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –í–∏–∫–æ–Ω–∞–Ω–Ω—è üè≠</h1>
            
            <div className="search-controls">
                <input
                    type="text"
                    placeholder="–ü–æ—à—É–∫ –∑–∞ ‚Ññ –ó–∞–≤–¥–∞–Ω–Ω—è –∞–±–æ –ü—Ä–∏–º—ñ—Ç–∫–∞–º–∏..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    disabled={loading}
                />
            </div>
            
            {loading && <p className="loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å...</p>}
            {error && <p className="error">{error}</p>}
            
            <div className="jobs-list">
                {filteredJobs.length === 0 && !loading && (
                    <p>–ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p>
                )}
                
                {filteredJobs.map((job) => (
                    <div 
                        key={job.job_id} 
                        // –ö–ª–∞—Å —Ñ–æ—Ä–º—É—î—Ç—å—Å—è –∑ —Å—Ç–∞—Ç—É—Å—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: status-–≤—á–µ—Ä–∑—ñ, status-–≤—Ä–æ–±–æ—Ç—ñ
                        className={`job-card status-${job.status.replace(/\s/g, '').toLowerCase()}`}
                        onClick={() => setSelectedJob(job)}
                    >
                        <div className="job-info">
                            <h3>–ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ{job.job_id}</h3>
                            <p>**–°—Ç–∞—Ç—É—Å:** <span className="status-badge status-text">{job.status}</span></p> 
                            <p>**–ü–ª–∞–Ω:** {job.due_date ? new Date(job.due_date).toLocaleDateString('uk-UA') : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
                            <p className="notes-snippet">–ü—Ä–∏–º—ñ—Ç–∫–∏: {job.notes ? job.notes.substring(0, 50) + (job.notes.length > 50 ? '...' : '') : '–ù–µ–º–∞—î'}</p>
                        </div>
                        <div className="job-status-indicator">
                            <button className="select-button">–û–±—Ä–∞—Ç–∏ ‚Üí</button>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
}

export default CuttingJobsSelectionPage;
