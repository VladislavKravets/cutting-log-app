// utils/supabaseCheck.js
import { supabase } from '../supabaseClient';

export const checkSupabaseRealtime = async () => {
    try {
        console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Supabase...');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
        const { data, error } = await supabase
            .from('notifications')
            .select('count')
            .limit(1);

        if (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:', error);
            return false;
        }

        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —É—Å–ø—ñ—à–Ω–µ');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ real-time –ø—ñ–¥–ø–∏—Å–∫—É
        return new Promise((resolve) => {
            const channel = supabase.channel('test-connection');

            const timeout = setTimeout(() => {
                console.warn('‚ö†Ô∏è Timeout –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ real-time –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è');
                channel.unsubscribe();
                resolve(false);
            }, 5000);

            channel
                .on('system', { event: 'connected' }, () => {
                    console.log('‚úÖ Real-time –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ');
                    clearTimeout(timeout);
                    channel.unsubscribe();
                    resolve(true);
                })
                .on('system', { event: 'disconnected' }, () => {
                    console.error('‚ùå Real-time –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ');
                    clearTimeout(timeout);
                    channel.unsubscribe();
                    resolve(false);
                })
                .subscribe((status) => {
                    if (status === 'SUBSCRIBED') {
                        console.log('‚úÖ Real-time –∫–∞–Ω–∞–ª –ø—ñ–¥–ø–∏—Å–∞–Ω–æ');
                    }
                });
        });

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Supabase:', error);
        return false;
    }
};