// hooks/useNotificationsDB.js
import { useEffect, useState, useCallback, useRef } from 'react';
import { supabase } from '../supabaseClient';

export const useNotificationsDB = () => {
    const [notifications, setNotifications] = useState([]);
    const [unreadCount, setUnreadCount] = useState(0);
    const [loading, setLoading] = useState(true);
    const [lastNotificationId, setLastNotificationId] = useState(0);
    const [isAutoRefreshActive, setIsAutoRefreshActive] = useState(false);
    const pollingRef = useRef(null);

    // –ö–ª—é—á—ñ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
    const READ_NOTIFICATIONS_KEY = 'read_notifications';
    const NOTIFICATIONS_CACHE_KEY = 'notifications_cache';
    const HIDDEN_NOTIFICATIONS_KEY = 'hidden_notifications';

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
    const getReadNotifications = useCallback(() => {
        try {
            const stored = localStorage.getItem(READ_NOTIFICATIONS_KEY);
            return stored ? new Set(JSON.parse(stored)) : new Set();
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å:', error);
            return new Set();
        }
    }, []);

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    const getHiddenNotifications = useCallback(() => {
        try {
            const stored = localStorage.getItem(HIDDEN_NOTIFICATIONS_KEY);
            return stored ? new Set(JSON.parse(stored)) : new Set();
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å:', error);
            return new Set();
        }
    }, []);

    // –ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
    const saveReadNotifications = useCallback((readIds) => {
        try {
            localStorage.setItem(READ_NOTIFICATIONS_KEY, JSON.stringify(Array.from(readIds)));
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å:', error);
        }
    }, []);

    // –ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    const saveHiddenNotifications = useCallback((hiddenIds) => {
        try {
            localStorage.setItem(HIDDEN_NOTIFICATIONS_KEY, JSON.stringify(Array.from(hiddenIds)));
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å:', error);
        }
    }, []);

    // –ö–µ—à—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
    const saveNotificationsToCache = useCallback((notifications) => {
        try {
            localStorage.setItem(NOTIFICATIONS_CACHE_KEY, JSON.stringify(notifications));
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:', error);
        }
    }, []);

    const getNotificationsFromCache = useCallback(() => {
        try {
            const cached = localStorage.getItem(NOTIFICATIONS_CACHE_KEY);
            return cached ? JSON.parse(cached) : [];
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–µ—à—É —Å–ø–æ–≤—ñ—â–µ–Ω—å:', error);
            return [];
        }
    }, []);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ—á–∏—Ç–∞–Ω–µ –ª–æ–∫–∞–ª—å–Ω–æ
    const isReadLocal = useCallback((notificationId) => {
        const readNotifications = getReadNotifications();
        return readNotifications.has(notificationId);
    }, [getReadNotifications]);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–≤–∞–Ω–µ –ª–æ–∫–∞–ª—å–Ω–æ
    const isHiddenLocal = useCallback((notificationId) => {
        const hiddenNotifications = getHiddenNotifications();
        return hiddenNotifications.has(notificationId);
    }, [getHiddenNotifications]);

    // –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ –ª–æ–∫–∞–ª—å–Ω–æ
    const markAsReadLocal = useCallback((notificationId) => {
        const readNotifications = getReadNotifications();
        if (!readNotifications.has(notificationId)) {
            readNotifications.add(notificationId);
            saveReadNotifications(readNotifications);

            setNotifications(prev =>
                prev.map(notification =>
                    notification.id === notificationId
                        ? { ...notification, is_read_local: true }
                        : notification
                )
            );

            setUnreadCount(prev => Math.max(0, prev - 1));
        }
    }, [getReadNotifications, saveReadNotifications]);

    // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ
    const hideNotificationLocal = useCallback((notificationId) => {
        const hiddenNotifications = getHiddenNotifications();
        if (!hiddenNotifications.has(notificationId)) {
            hiddenNotifications.add(notificationId);
            saveHiddenNotifications(hiddenNotifications);

            // –í–∏–¥–∞–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É
            setNotifications(prev =>
                prev.filter(notification => notification.id !== notificationId)
            );

            // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö
            const deletedNotification = notifications.find(n => n.id === notificationId);
            if (deletedNotification && !deletedNotification.is_read_local) {
                setUnreadCount(prev => Math.max(0, prev - 1));
            }
        }
    }, [getHiddenNotifications, saveHiddenNotifications, notifications]);

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –±—Ä–∞—É–∑–µ—Ä–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
    const showBrowserNotification = useCallback((title, message, jobId = null) => {
        if ('Notification' in window && Notification.permission === 'granted') {
            try {
                const browserNotification = new Notification(title, {
                    body: message,
                    icon: '/favicon.ico',
                    tag: `notification-${Date.now()}`
                });

                browserNotification.onclick = () => {
                    window.focus();
                    if (jobId) {
                        window.location.href = `/view/jobs?id=${jobId}`;
                    }
                    browserNotification.close();
                };

                setTimeout(() => {
                    browserNotification.close();
                }, 5000);
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
            }
        }
    }, []);

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö
    const updateUnreadCount = useCallback((notificationsList) => {
        const unread = notificationsList.filter(n => !n.is_read_local).length;
        setUnreadCount(unread);
    }, []);

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑ –ë–î –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
    const loadNotifications = useCallback(async () => {
        try {
            setLoading(true);
            //console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑ –ë–î...');

            const { data, error } = await supabase
                .from('notifications')
                .select('*')
                .order('created_at', { ascending: false })
                .limit(100);

            if (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:', error);
                const cached = getNotificationsFromCache();
                if (cached.length > 0) {
                    //console.log('üìÇ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
                    setNotifications(cached);
                    updateUnreadCount(cached);
                }
                return;
            }

            if (data && data.length > 0) {
                //console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${data.length} —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑ –ë–î`);

                const readNotifications = getReadNotifications();
                const hiddenNotifications = getHiddenNotifications();

                // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è - –≤–∏–¥–∞–ª—è—î–º–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ
                const filteredNotifications = data.filter(notification =>
                    !hiddenNotifications.has(notification.id)
                );

                // –î–æ–¥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
                const notificationsWithLocalStatus = filteredNotifications.map(notification => ({
                    ...notification,
                    is_read_local: readNotifications.has(notification.id)
                }));

                setNotifications(notificationsWithLocalStatus);
                updateUnreadCount(notificationsWithLocalStatus);
                saveNotificationsToCache(notificationsWithLocalStatus);

                setLastNotificationId(data[0].id);
            } else {
                //console.log('üì≠ –í –ë–î –Ω–µ–º–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω—å');
                setNotifications([]);
                setUnreadCount(0);
                setLastNotificationId(0);
            }
        } catch (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å:', err);
        } finally {
            setLoading(false);
        }
    }, [getReadNotifications, getHiddenNotifications, getNotificationsFromCache, saveNotificationsToCache, updateUnreadCount]);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
    const checkForNewNotifications = useCallback(async () => {
        try {
            //console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å...');

            if (lastNotificationId === 0) {
                await loadNotifications();
                return;
            }

            const { data, error } = await supabase
                .from('notifications')
                .select('*')
                .gt('id', lastNotificationId)
                .order('id', { ascending: true });

            if (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å:', error);
                return;
            }

            if (data && data.length > 0) {
                //console.log(`üì® –ó–Ω–∞–π–¥–µ–Ω–æ ${data.length} –Ω–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å`);

                const readNotifications = getReadNotifications();
                const hiddenNotifications = getHiddenNotifications();

                // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è - –≤–∏–¥–∞–ª—è—î–º–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ
                const filteredNewNotifications = data.filter(notification =>
                    !hiddenNotifications.has(notification.id)
                );

                const newNotificationsWithLocalStatus = filteredNewNotifications.map(notification => ({
                    ...notification,
                    is_read_local: readNotifications.has(notification.id)
                }));

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ–¥–Ω–∏–º –≤–∏–∫–ª–∏–∫–æ–º
                setNotifications(prev => {
                    const updated = [...newNotificationsWithLocalStatus, ...prev];

                    // –†–∞—Ö—É—î–º–æ –Ω–æ–≤—ñ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω—ñ
                    const newUnread = newNotificationsWithLocalStatus.filter(n => !n.is_read_local).length;
                    setUnreadCount(current => current + newUnread);

                    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                    saveNotificationsToCache(updated);

                    return updated;
                });

                setLastNotificationId(data[data.length - 1].id);

                // –ü–æ–∫–∞–∑—É—î–º–æ –±—Ä–∞—É–∑–µ—Ä–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                newNotificationsWithLocalStatus.forEach(notification => {
                    if (!notification.is_read_local) {
                        showBrowserNotification(notification.title, notification.message, notification.job_id);
                    }
                });
            } else {
                //console.log('üì≠ –ù–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å:', error);
        }
    }, [lastNotificationId, loadNotifications, showBrowserNotification, getReadNotifications, getHiddenNotifications, saveNotificationsToCache]);

    // –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ (–¢–Ü–õ–¨–ö–ò –ª–æ–∫–∞–ª—å–Ω–æ)
    const markAsRead = useCallback((notificationId = null) => {
        try {
            const readNotifications = getReadNotifications();

            if (notificationId) {
                markAsReadLocal(notificationId);
                //console.log('‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ –ª–æ–∫–∞–ª—å–Ω–æ:', notificationId);
            } else {
                // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –≤—Å—ñ –≤–∏–¥–∏–º—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω—ñ
                const visibleIds = notifications.map(n => n.id);
                visibleIds.forEach(id => readNotifications.add(id));
                saveReadNotifications(readNotifications);

                setNotifications(prev =>
                    prev.map(notification => ({
                        ...notification,
                        is_read_local: true
                    }))
                );

                setUnreadCount(0);
                //console.log('‚úÖ –í—Å—ñ –≤–∏–¥–∏–º—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ');
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–≥–æ:', error);
        }
    }, [notifications, getReadNotifications, saveReadNotifications, markAsReadLocal]);

    // –õ–û–ö–ê–õ–¨–ù–ï –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    const deleteNotification = useCallback((notificationId) => {
        try {
            //console.log('üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', notificationId);
            hideNotificationLocal(notificationId);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
        }
    }, [hideNotificationLocal]);

    // –õ–û–ö–ê–õ–¨–ù–ï –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
    const clearAllNotifications = useCallback(() => {
        try {
            //console.log('üßπ –õ–æ–∫–∞–ª—å–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å');

            const allNotificationIds = notifications.map(n => n.id);
            const hiddenNotifications = getHiddenNotifications();

            // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –ø–æ—Ç–æ—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö
            allNotificationIds.forEach(id => hiddenNotifications.add(id));
            saveHiddenNotifications(hiddenNotifications);

            // –û—á–∏—â—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
            setNotifications([]);
            setUnreadCount(0);

            //console.log('‚úÖ –í—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –æ—á–∏—â–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å:', error);
        }
    }, [notifications, getHiddenNotifications, saveHiddenNotifications]);

    // –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑ real-time
    const handleNewNotification = useCallback((notification) => {
        //console.log('üéØ –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑ real-time:', notification);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –ø—Ä–∏—Ö–æ–≤–∞–Ω–µ
        if (isHiddenLocal(notification.id)) {
            //console.log('üö´ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–≤–∞–Ω–µ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ:', notification.id);
            return;
        }

        const isRead = isReadLocal(notification.id);
        const notificationWithLocalStatus = {
            ...notification,
            is_read_local: isRead
        };

        setNotifications(prev => {
            const exists = prev.find(n => n.id === notification.id);
            if (exists) {
                //console.log('‚ö†Ô∏è –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ');
                return prev;
            }

            const updated = [notificationWithLocalStatus, ...prev];

            // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
            if (!isRead) {
                setUnreadCount(current => current + 1);
                showBrowserNotification(notification.title, notification.message, notification.job_id);
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
            saveNotificationsToCache(updated);

            return updated;
        });

        if (notification.id > lastNotificationId) {
            setLastNotificationId(notification.id);
        }
    }, [lastNotificationId, showBrowserNotification, isReadLocal, isHiddenLocal, saveNotificationsToCache]);

    // –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ä—Ç—É –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    const startAutoRefresh = useCallback(() => {
        //console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å...');

        if (pollingRef.current) {
            clearInterval(pollingRef.current);
            pollingRef.current = null;
        }

        pollingRef.current = setInterval(() => {
            //console.log('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å...');
            checkForNewNotifications();
        }, 15000);

        setIsAutoRefreshActive(true);
        //console.log('‚úÖ –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ');

        return () => {
            if (pollingRef.current) {
                clearInterval(pollingRef.current);
                pollingRef.current = null;
                setIsAutoRefreshActive(false);
            }
        };
    }, [checkForNewNotifications]);

    // –§—É–Ω–∫—Ü—ñ—è –∑—É–ø–∏–Ω–∫–∏ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    const stopAutoRefresh = useCallback(() => {
        //console.log('‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...');
        if (pollingRef.current) {
            clearInterval(pollingRef.current);
            pollingRef.current = null;
            setIsAutoRefreshActive(false);
            //console.log('‚úÖ –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ');
        }
    }, []);

    // –û—á–∏—â–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö (—Å–∫–∏–¥–∞–Ω–Ω—è –≤—Å—ñ—Ö –ª–æ–∫–∞–ª—å–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å)
    const clearLocalData = useCallback(() => {
        try {
            localStorage.removeItem(READ_NOTIFICATIONS_KEY);
            localStorage.removeItem(NOTIFICATIONS_CACHE_KEY);
            localStorage.removeItem(HIDDEN_NOTIFICATIONS_KEY);
            //console.log('üßπ –í—Å—ñ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å –æ—á–∏—â–µ–Ω–æ');
            loadNotifications();
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', error);
        }
    }, [loadNotifications]);

    // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
    const restoreHiddenNotifications = useCallback(() => {
        try {
            localStorage.removeItem(HIDDEN_NOTIFICATIONS_KEY);
            //console.log('üîì –í—Å—ñ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ');
            loadNotifications();
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:', error);
        }
    }, [loadNotifications]);

    // Real-time –ø—ñ–¥–ø–∏—Å–∫–∞
    useEffect(() => {
        //console.log('üîå –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è real-time –ø—ñ–¥–ø–∏—Å–∫–∏...');

        let subscription;

        const initializeRealtime = async () => {
            try {
                await loadNotifications();

                subscription = supabase
                    .channel('notifications-public')
                    .on(
                        'postgres_changes',
                        {
                            event: 'INSERT',
                            schema: 'public',
                            table: 'notifications'
                        },
                        (payload) => {
                            //console.log('üéØ –ù–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ:', payload.new);
                            handleNewNotification(payload.new);
                        }
                    )
                    .subscribe((status) => {
                        //console.log('üì° –°—Ç–∞—Ç—É—Å real-time –ø—ñ–¥–ø–∏—Å–∫–∏:', status);
                    });

            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó real-time:', error);
            }
        };

        initializeRealtime();

        return () => {
            if (subscription) {
                subscription.unsubscribe();
            }
        };
    }, []);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    useEffect(() => {
        //console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...');
        const cleanupPolling = startAutoRefresh();

        return () => {
            if (cleanupPolling) cleanupPolling();
        };
    }, [startAutoRefresh]);

    // –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
    const createNotification = async (notificationData) => {
        try {
            const { data, error } = await supabase
                .from('notifications')
                .insert([{
                    type: notificationData.type || 'system',
                    title: notificationData.title,
                    message: notificationData.message,
                    job_id: notificationData.job_id || null
                }])
                .select();

            if (error) throw error;

            //console.log('üìù –ù–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ –ë–î:', data[0]);
            return data[0];
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
            throw error;
        }
    };

    const manualCheckForNewNotifications = async () => {
        //console.log('üîç –†—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å...');
        await checkForNewNotifications();
    };

    const getAutoRefreshStatus = useCallback(() => {
        return {
            isActive: isAutoRefreshActive,
            intervalExists: pollingRef.current !== null
        };
    }, [isAutoRefreshActive]);

    return {
        notifications,
        unreadCount,
        loading,
        loadNotifications,
        markAsRead,
        deleteNotification,
        clearAllNotifications,
        createNotification,
        manualCheckForNewNotifications,
        startAutoRefresh,
        stopAutoRefresh,
        isAutoRefreshActive,
        getAutoRefreshStatus,
        clearLocalData,
        restoreHiddenNotifications, // –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
        isReadLocal
    };
};